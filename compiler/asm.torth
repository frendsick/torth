include "std"
include "typing"
include "compiler/utils"
include "compiler/class/Func"
include "compiler/class/Location"
include "compiler/class/Mem"
include "compiler/class/Op"
include "compiler/class/Token"

// Generate the beginning of the assembly file
// Params: file_name, List[Mem]
// Return: Assembly
function initialize_asm_file file_name:str memories:List[Mem] :
  get_asm_file_start
  memories get_memory_definitions_asm   str.cat
  "section .text\n\n"                   str.cat
  mode_644 file_name write_file drop
end

function get_asm_file_start -> str :
    "default rel\n\n"

    ";; DEFINES\n"                      str.cat
    "%define sys_exit 60\n\n"           str.cat

    "section .bss\n"                    str.cat
    "  args_ptr: resq 1\n"              str.cat
    "  return_stack: resb 1337*64\n"    str.cat
end

// Generate assembly code from Mem definitions
function get_memory_definitions_asm memories:List[Mem] -> str :
  "" str.copy
  0
  take index assembly_code in

  // Iterate over each Mem and generate assembly code for it
  while index memories cast(List) List.len < do

    // Get the Mem's name and size
    index memories cast(List) List.nth ptr.load
    dup   Mem.name
    swap  Mem.bytes
    take memory_size memory_name in

    // Append current Mem to assembly_code
    assembly_code
    "  "              str.cat
    memory_name       str.cat
    ": RESB "         str.cat
    memory_size itoa  str.cat
    "\n"              str.cat
    assembly_code =
    index 1 + index = // index++
  done
  assembly_code "\n"  str.cat
end

// Get Assembly for certain Op
// Params: Pointer to Op (PTR), Program
// Return: Assembly
function get_op_asm op:Op program:Program -> str :
  // Save Op and Token.value in Binding
  op Op.token Token.value
  op Op.type
  take op_type token_value in

  // Get assembly for the correct OpType
  if
    op_type OpType.CAST ==
    op_type OpType.IF ==          ||
    op_type OpType.IN ==          ||
    op_type OpType.TAKE ==        ||
  do
    "" return
  elif op_type OpType.ASSIGN_BIND == do
    program op get_assign_bind_asm
    return
  elif op_type OpType.BREAK == do
    program op get_break_asm
    return
  elif op_type OpType.CONTINUE == do
    program op get_continue_asm
    return
  elif op_type OpType.DO == do
    program op get_do_asm
    return
  elif op_type OpType.DONE == do
    program op get_done_asm
    return
  elif op_type OpType.ELIF == do
    program op get_elif_asm
    return
  elif op_type OpType.ELSE == do
    program op get_else_asm
    return
  elif op_type OpType.ENDIF == do
    op get_endif_asm
    return
  elif op_type OpType.FUNCTION_CALL == do
    token_value get_function_call_asm
    return
  elif op_type OpType.PEEK == do
    get_peek_asm
    return
  elif op_type OpType.PEEK_BIND == do
    op get_peek_bind_asm
    return
  elif op_type OpType.POP_BIND == do
    op get_pop_bind_asm
    return
  elif op_type OpType.PUSH_BIND == do
    op get_push_bind_asm
    return
  elif op_type OpType.PUSH_BOOL == do
    token_value str.upper get_push_bool_asm
    return
  elif op_type OpType.PUSH_CHAR == do
    1 token_value str.char_at get_push_char_asm
    return
  elif op_type OpType.PUSH_FN == do
    "&" token_value str.removesuffix get_push_fn_asm
    return
  elif op_type OpType.PUSH_INT == do
    token_value get_push_int_asm
    return
  elif op_type OpType.PUSH_PTR == do
    token_value get_push_ptr_asm
    return
  elif op_type OpType.PUSH_STR == do
    op get_push_str_asm
    return
  elif op_type OpType.RETURN == do
    op Op.func get_return_asm
    return
  elif op_type OpType.WHILE == do
    op get_while_asm
    return
  elif op_type OpType.INTRINSIC == do
    op Op.token get_intrinsic_asm
    return
  else
    "Generating assembly for '" token_value str.cat
    "' is not implemented: Unknown word\n" str.cat
    "" swap NotImplementedError
  endif
end

// Get assembly code for certain Intrinsic
// Params: Token
// Return: Assembly
function get_intrinsic_asm token:Token -> str :
  token Token.value str.copy str.upper
  take intrinsic in
  if intrinsic "AND" streq do
    get_and_asm return
  elif intrinsic "ARGC" streq do
    get_argc_asm return
  elif intrinsic "ARGV" streq do
    get_argv_asm return
  elif intrinsic "DIV" streq do
    get_div_asm return
  elif intrinsic "DROP" streq do
    get_drop_asm return
  elif intrinsic "DUP" streq do
    get_dup_asm return
  elif intrinsic "ENVP" streq do
    get_envp_asm return
  elif intrinsic "EXEC" streq do
    get_exec_asm return
  elif intrinsic "EQ" streq do
    get_eq_asm return
  elif intrinsic "GE" streq do
    get_ge_asm return
  elif intrinsic "GT" streq do
    get_gt_asm return
  elif intrinsic "LE" streq do
    get_le_asm return
  elif intrinsic "LT" streq do
    get_lt_asm return
  elif intrinsic "LOAD_" str.startswith do
    token intrinsic get_load_asm
  elif intrinsic "MINUS" streq do
    get_minus_asm return
  elif intrinsic "MOD" streq do
    get_mod_asm return
  elif intrinsic "MUL" streq do
    get_mul_asm return
  elif intrinsic "NE" streq do
    get_ne_asm return
  elif intrinsic "NTH" streq do
    get_nth_asm return
  elif intrinsic "OR" streq do
    get_or_asm return
  elif intrinsic "OVER" streq do
    get_over_asm return
  elif intrinsic "PLUS" streq do
    get_plus_asm return
  elif intrinsic "ROT" streq do
    get_rot_asm return
  elif intrinsic "SHL" streq do
    get_shl_asm return
  elif intrinsic "SHR" streq do
    get_shr_asm return
  elif intrinsic "STORE_" str.startswith do
    token intrinsic get_store_asm
  elif intrinsic "SWAP" streq do
    get_swap_asm return
  elif intrinsic "SYSCALL" str.startswith do
    intrinsic get_syscall_asm return
  else
    "Generating assembly for intrinsic '" intrinsic str.cat
    "' is not implemented\n" str.cat
    "" swap NotImplementedError
  endif
end

// Get Assembly comment for Op
// Params: Pointer to Op (PTR)
// Return: Comment string (STR)
function get_op_comment_asm op:Op -> str :
  op Op.type OpType.repr
  op Op.token Token.value
  take token_value op_type_str in

  // Comment format as Python3 f-string:
  // f";; [{function_name}] {op_type_str} | File: {file}, Row: {row}, Col: {col}\n"
  ";; ["
  op Op.func Func.name                  str.cat
  "] "                                  str.cat

  if
    op_type_str "FUNCTION_CALL" streq
    op_type_str "INTRINSIC" streq   ||
    op_type_str "PUSH_BIND" streq   ||
    op_type_str "POP_BIND" streq    ||
    op_type_str "PEEK_BIND" streq   ||
  do
    op_type_str                         str.cat
    " "                                 str.cat
    token_value                         str.cat
  else
    op_type_str                         str.cat
  endif

  // Add Op.token Location information
  " | File: "                           str.cat
  op Op.token Token.location
  take token_loc in

  // Add file, row and column information
  token_loc Location.file         str.cat
  ", Row: "                       str.cat
  token_loc Location.row itoa     str.cat
  ", Column: "                    str.cat
  token_loc Location.column itoa  str.cat
  "\n"                            str.cat
end

// Assign a value to Variable
// Params: Op, Program
// Return: Assembly
function get_assign_bind_asm op:Op program:Program -> str :
  // variable = program[op.id - 1].token.value
  op Op.id 1 - program cast(List) List.nth Op.load
  Op.token Token.value
  take variable_name in

  // Get the variable's index in the function's variable list
  op Op.func Func.variables variable_name get_variable_index
  take variable_index in

  // Generate assembly
  get_drop_asm  // Drop the current variable value
  variable_index set_nth_from_return_stack_asm str.cat
end

// BREAK is an unconditional jump to operand after current loop's DONE
// Params: Op, Program
// Return: Assembly
function get_break_asm op:Op program:Program -> str :
  program op get_parent_while
  program swap get_done_op_for_while
  Op.id
  op Op.func Func.name
  take function_name parent_done.id in

  "  jmp "
  function_name       str.cat
  "_DONE"             str.cat
  parent_done.id itoa str.cat
end

// CONTINUE is an unconditional jump to current loop's WHILE
// Params: Op, Program
// Return: Assembly
function get_continue_asm op:Op program:Program -> str :
  program op get_parent_while
  Op.id
  op Op.func Func.name
  take function_name parent_while.id in

  "  jmp "
  function_name         str.cat
  "_WHILE"              str.cat
  parent_while.id itoa  str.cat
end

// Get the parent IF, ELIF or WHILE for the current DO operand
function get_parent_op_type_do op:Op program:Program -> int :
  op Op.id 1 - // index = op.id - 1
  0
  take parent_count index in

  // for index in range(op.id - 1, -1, -1):
  while index -1 > do

    // Get the current Op's OpType
    index program cast(List) List.nth ptr.load Op.type
    take op_type in

    if
      op_type OpType.IF     ==
      op_type OpType.ELIF   == ||
      op_type OpType.WHILE  == ||
    do
      if parent_count 0 == do
        op_type return
      endif
      parent_count 1 - parent_count = // parent_count--
      index 1 - index = // index--
      continue
    endif

    if
      op_type OpType.DONE   ==
      op_type OpType.ENDIF  ==
      ||
    do
      parent_count 1 + parent_count = // parent_count++
    endif
    index 1 - index = // index--
  done
  op Op.token
  "DO operand without parent IF, ELIF or WHILE\n"
  "AMBIGUOUS_DO" CompilerErrorWithToken NULL
end

// DO is conditional jump to operand after ELIF, ELSE, END or ENDIF
// Params: Op, Program
// Return: Assembly
function get_do_asm op:Op program:Program -> str :
  program op get_parent_op_type_do
  op Op.id 1 + // index = op.id + 1
  0
  take
    parent_op_count
    index
    parent_op_type
  in

  while index program cast(List) List.len < do
    // Get the current operand's OpType
    index program cast(List) List.nth ptr.load Op.type
    take op_type in

    // Keep count on the nested IFs or WHILEs depending on the parent Op
    if
      // Nested IF block
      parent_op_type  OpType.IF     ==
      parent_op_type  OpType.ELIF   ==
      ||
      op_type         OpType.IF     ==
      &&

      // Nested WHILE block
      parent_op_type  OpType.WHILE  ==
      op_type         OpType.WHILE  ==
      &&

      || // Found nested IF block or WHILE block
    do
      parent_op_count 1 + parent_op_count =
      index 1 + index =
      continue
    endif

    // Generate assembly if we find the corresponding ELIF, ELSE, ENDIF or DONE
    if
      // Found the next possible jump location when the parent OpType is IF
      op_type         OpType.ELIF   ==
      op_type         OpType.ELSE   ==  ||
      op_type         OpType.ENDIF  ==  ||
      parent_op_type  OpType.IF     ==  &&

      // Found the next possible jump location when the parent OpType is ELIF
      op_type         OpType.ELIF   ==
      op_type         OpType.ELSE   ==  ||
      op_type         OpType.ENDIF  ==  ||
      parent_op_type  OpType.ELIF   ==  &&
      ||  // Logical OR with parent IF checks

      // Found the next possible jump location when the parent OpType is WHILE
      parent_op_type  OpType.WHILE  ==
      op_type         OpType.DONE   ==  &&
      ||  // Logical OR with parent IF and ELIF checks

      // The current Op is not inside a nested block
      parent_op_count 0 ==

      // Try if an Op was found which matches any of the earlier checks
      // and also is not found from within a nested block
      &&
    do
      // jump_destination = f"{op.func.name}_{program[index].type}_{index}"
      op Op.func Func.name
      "_"                                                             str.cat
      index program cast(List) List.nth ptr.load Op.type OpType.repr  str.cat
      index itoa                                                      str.cat
      generate_do_asm return
    endif

    // Decrement counter when passing another block's ENDIF / DONE
    if
      parent_op_type  OpType.IF     ==
      parent_op_type  OpType.ELIF   == ||
      op_type         OpType.ENDIF  == &&

      parent_op_type  OpType.WHILE  ==
      op_type         OpType.DONE   == &&
      ||
    do
      parent_op_count 1 - parent_op_count =
      index 1 + index =
      continue
    endif
    index 1 + index = // index++
  done
  op Op.token
  "The current block is missing the corresponding closing keyword"
  "UNCLOSED_BLOCK" CompilerErrorWithToken ""
end

// DO pops an item from the stack and jumps to jump_destination if it is zero
// Params: jump_destination (STR)
// Return: Assembly
function generate_do_asm jump_destination:str -> str :
  "  pop rax\n"
  "  test rax, rax\n" str.cat
  "  jz "             str.cat
  jump_destination    str.cat
  "\n"                str.cat
end

// DONE is an unconditional jump to current loop's WHILE
// Params: Op, Program
// Return: Assembly
function get_done_asm op:Op program:Program -> str :
  // Get the parent WHILE Op
  program op get_parent_while
  take parent_while in

  // Generate assembly
  op Op.func Func.name
  op Op.id itoa
  parent_while Op.id itoa
  take
    parent_while.id
    op.id
    function_name
  in

  "  jmp "
  function_name     str.cat
  "_WHILE"          str.cat
  parent_while.id   str.cat
  "\n"              str.cat
  function_name     str.cat
  "_DONE"           str.cat
  op.id             str.cat
  ":\n"             str.cat
end

// ELIF is an unconditional jump to ENDIF and a keyword for DO to jump to
// Params: Op, Program
// Return: Assembly
function get_elif_asm op:Op program:Program -> str :
  // Get the related ENDIF Op
  program op get_related_endif
  take related_endif in

  // Generate assembly
  op Op.func Func.name
  op Op.id itoa
  related_endif Op.id itoa
  take
    related_endif.id
    op.id
    function_name
  in

  "  jmp "
  function_name     str.cat
  "_ENDIF"          str.cat
  related_endif.id  str.cat
  "\n"              str.cat
  function_name     str.cat
  "_ELIF"           str.cat
  op.id             str.cat
  ":\n"             str.cat
end

// ELSE is an unconditional jump to ENDIF and a keyword for DO to jump to
// Params: Op, Program
// Return: Assembly
function get_else_asm op:Op program:Program -> str :
  // Get the related ENDIF Op
  program op get_related_endif
  take related_endif in

  // Generate assembly
  op Op.func Func.name
  op Op.id itoa
  related_endif Op.id itoa
  take
    related_endif.id
    op.id
    function_name
  in

  "  jmp "
  function_name     str.cat
  "_ENDIF"          str.cat
  related_endif.id  str.cat
  "\n"              str.cat
  function_name     str.cat
  "_ELSE"           str.cat
  op.id             str.cat
  ":\n"             str.cat
end

// ENDIF is just a keyword for DO, ELIF or ELSE to jump to
// Params: Op
// Return: Assembly
function get_endif_asm op:Op -> str :
  op Op.func Func.name
  "_ENDIF"      str.cat
  op Op.id itoa str.cat
  ":\n"         str.cat
end

// Generate assembly for calling a function
// Params: Func's name
// Return: Assembly
function get_function_call_asm function_name:str -> str :
  "  call "
  function_name get_valid_label_for_nasm str.cat
  "\n" str.cat
end

// Generate Assembly for OpType.PEEK
// Params: None
// Return: Assembly
function get_peek_asm -> str :
  // Save current stack pointer to r15
  "  mov r15, rsp\n"
end

// Generate Assembly for OpType.PEEK_BIND
// Params: Op
// Return: Assembly
function get_peek_bind_asm op:Op -> str :
  // Push copy of the Nth value from the PEEK block
  "  push QWORD [r15]\n"
  "  add r15, 8\n" str.cat

  // Push the copy of the value to the return stack
  op set_local_variable str.cat
end

// Generate Assembly for OpType.POP_BIND
// Params: Op
// Return: Assembly
function get_pop_bind_asm op:Op -> str :
  op set_local_variable
end

// Generate Assembly for OpType.PUSH_BIND
// Params: Op
// Return: Assembly
function get_push_bind_asm op:Op -> str :
  op Op.func Func.variables
  op Op.token Token.value
  get_variable_index get_nth_from_return_stack_asm
end

// Generate Assembly for OpType.PUSH_BOOL
// Params: Op.token.value
// Return: Assembly
function get_push_bool_asm token_value_upper:str -> str :
  if token_value_upper "TRUE" streq
  do    "  push 1\n"
  else  "  push 0\n"
  endif
end

// Generate Assembly for OpType.PUSH_CHAR
// Params: Op.token.value[1] ('a' => a)
// Return: Assembly
function get_push_char_asm char -> str :
  cast(int) itoa
  "  push " swap    str.cat
  "\n"              str.cat
end

// Generate Assembly for OpType.PUSH_FN
// Params: Op.token.value
// Return: Assembly
function get_push_fn_asm function_name:str -> str :
  "  mov rax, "
  function_name get_valid_label_for_nasm    str.cat
  "\n  push rax\n"                          str.cat
end

// Generate Assembly for OpType.PUSH_INT
// Params: Op.token.value
// Return: Assembly
function get_push_int_asm integer:str -> str :
  "  mov rax, " integer str.cat
  "\n  push rax\n"      str.cat
end

// Generate Assembly for OpType.PUSH_PTR
// Params: Op.token.value
// Return: Assembly
function get_push_ptr_asm pointer:str -> str :
  "  mov rax, " pointer str.cat
  "\n  push rax\n"      str.cat
end

// Generate Assembly for OpType.PUSH_STR
// Params: Op
// Return: Assembly
function get_push_str_asm op:Op -> str :
  // Initialize variables
  op Op.id itoa
  op Op.func Func.name
  take function_name op_id in

  "  mov rsi, "
  function_name             str.cat
  "_s"                      str.cat
  op_id                     str.cat
  " ; Pointer to string\n"  str.cat
  "  push rsi\n"            str.cat
end

// Generate Assembly for OpType.RETURN
// Params: Func.name
// Return: Assembly
function get_return_asm func:Func -> str :
  if func Func.name str.copy str.upper "MAIN" streq do
    "0"           get_push_int_asm
    func get_function_end_asm str.cat
    return
  endif
  func get_function_end_asm
end

// Generate Assembly for OpType.WHILE
// Params: Op
// Return: Assembly
function get_while_asm op:Op -> str :
  op Op.id itoa
  op Op.func Func.name
  take function_name op_id in

  function_name
  "_WHILE"  str.cat
  op_id     str.cat
  ":\n"     str.cat
end

// Return the assembly code for arithmetic Intrinsics (PLUS, MINUS, MUL)
// Params: operand
// Return: Assembly
function get_arithmetic_asm operand:str -> str :
  "  pop rax\n  "
  operand           str.cat
  " [rsp], rax\n  " str.cat
end

// Generate assembly code for different comparison Intrinsics, like EQ and GE.
// Only the cmov operand changes with different comparison intrinsics.
// Params: cmov_operand
// Return: Assembly
function get_comparison_asm cmov_operand:str -> str :
  "  pop rax\n"
  "  mov rcx, 0\n"              str.cat
  "  mov rdx, 1\n"              str.cat
  "  cmp QWORD [rsp], rax\n  "  str.cat
  cmov_operand                  str.cat
  " rcx, rdx\n"                 str.cat
  "  mov QWORD [rsp], rcx\n"    str.cat
end

// AND performs bitwise-AND operation to two integers
// Params: None
// Return: Assembly
function get_and_asm -> str :
  "  pop rax\n"
  "  and [rsp], rax\n" str.cat
end

// ARGC pushes the argument count to the stack
// Params: None
// Return: Assembly
function get_argc_asm -> str :
  "  mov rax, [args_ptr]\n"
  "  mov rax, [rax]\n"  str.cat
  "  push rax\n"        str.cat
end

// ARGV pushes the pointer to argument array to the stack
// Params: None
// Return: Assembly
function get_argv_asm -> str :
  "  mov rax, [args_ptr]\n"
  "  add rax, 8\n"  str.cat
  "  push rax\n"    str.cat
end

// DIV pops two integers from the stack and pushes their quotient
// Params: None
// Return: Assembly
function get_div_asm -> str :
  "  xor edx, edx ; Do not use floating point arithmetic\n"
  "  pop rbx\n"               str.cat
  "  pop rax\n"               str.cat
  "  div rbx\n"               str.cat
  "  push rax ; Quotient\n"   str.cat
end

// DROP removes one item from the stack
// Params: None
// Return: Assembly
function get_drop_asm -> str :
  "  add rsp, 8\n"
end

// DUP duplicates the top element in the stack
// Params: None
// Return: Assembly
function get_dup_asm -> str :
  "  push QWORD [rsp]\n"
end

// ENVP pushes the environment pointer to the stack
// Params: None
// Return: Assembly
function get_envp_asm -> str :
  "  mov rax, [args_ptr]\n"
  "  add rax, 24\n" str.cat
  "  push rax\n"    str.cat
end

// EXEC pops and executes function pointer from the stack
// Params: None
// Return: Assembly
function get_exec_asm -> str :
  "  pop rax\n"
  "  call QWORD rax\n" str.cat
end

// EQ takes two elements from the stack and checks if they are equal.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_eq_asm -> str :
  "cmove" get_comparison_asm
end

// GE takes two items from the stack and checks if the second item >= the other.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_ge_asm -> str :
  "cmovge" get_comparison_asm
end

// GT takes two items from the stack and checks if the second item > the other.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_gt_asm -> str :
  "cmovg" get_comparison_asm
end

// LE takes two items from the stack and checks if the second item <= the other.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_le_asm -> str :
  "cmovle" get_comparison_asm
end

// LT takes two items from the stack and checks if the second item < the other.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_lt_asm -> str :
  "cmovl" get_comparison_asm
end

// Params: load_variant, Token
// Return: Assembly
function get_load_asm str Token -> str :
  str.copy str.upper
  take load_variant token in

  // Get the correct size register for the load_variant
  if    load_variant "LOAD_BYTE"  streq do "bl"
  elif  load_variant "LOAD_WORD"  streq do "bx"
  elif  load_variant "LOAD_DWORD" streq do "ebx"
  elif  load_variant "LOAD_QWORD" streq do "rbx"
  else
    token
    "'" load_variant                  str.cat
    "' is not a valid LOAD Intrinsic" str.cat
    "VALUE_ERROR" CompilerErrorWithToken ""
  endif
  take register in

  // Generate assembly
  "  pop rax\n"
  "  xor rbx, rbx\n"  str.cat
  "  mov "            str.cat
  register            str.cat
  ", [rax]\n"         str.cat
  "  push rbx\n"      str.cat
end

// Pop two integers from the stack and decrement the second value from the top one
function get_minus_asm -> str :
  "sub" get_arithmetic_asm
end

// MOD pops two integers from the stack and pushes their remainder
// Params: None
// Return: Assembly
function get_mod_asm -> str :
  "  xor edx, edx ; Do not use floating point arithmetic\n"
  "  pop rbx\n"               str.cat
  "  pop rax\n"               str.cat
  "  div rbx\n"               str.cat
  "  push rdx ; Remainder\n"  str.cat
end

// Pop two integers from the stack and push the product of the two values
// Params: None
// Return: Assembly
function get_mul_asm -> str :
  "  pop rax\n"
  "  mul QWORD [rsp]\n"           str.cat
  "  mov QWORD [rsp], rax ; Product\n" str.cat
end

// NE takes two items from the stack and checks if they are not equal.
// Then it pushes the boolean value of the comparison.
// Params: None
// Return: Assembly
function get_ne_asm -> str :
  "cmovne" get_comparison_asm
end

// Copies Nth element from the stack to the top of the stack.
// Note that the Nth is counted without the popped integer.
// Example: 30 20 10 3 NTH => Pushes 30 to the stack because 30 is 3rd element without the popped 3.

// => 30 is 3rd element without the popped 3
function get_nth_asm -> str :
  "  pop rax\n"
  "  push QWORD [(rax-1)*8+rsp]\n" str.cat
end

// OR performs bitwise-OR operation to two integers
// Params: None
// Return: Assembly
function get_or_asm -> str :
  "  pop rax\n"
  "  or [rsp], rax\n" str.cat
end

// OVER Intrinsic pushes a copy of the second element of the stack
// Params: None
// Return: Assembly
function get_over_asm -> str :
  "  push QWORD [rsp+8]\n"
end

// Pop two integers from the stack and push the sum of the two values
// Params: None
// Return: Assembly
function get_plus_asm -> str :
  "add" get_arithmetic_asm
end

// Rotate the top three elements of the stack so that the third becomes first
// Params: None
// Return: Assembly
function get_rot_asm -> str :
  "  pop rax\n"
  "  xchg rax, QWORD [rsp]\n"   str.cat
  "  xchg rax, QWORD [rsp+8]\n" str.cat
  "  push rax\n"                str.cat
end

// SHL Intrinsic shifts the bits of the second argument to the left
// as many times as indicated by the first.
// Params: None
// Return: Assembly
function get_shl_asm -> str :
  "  pop rcx\n"
  "  shl QWORD [rsp], cl\n" str.cat
end

// SHR Intrinsic shifts the bits of the second argument to the right
// as many times as indicated by the first.
// Params: None
// Return: Assembly
function get_shr_asm -> str :
  "  pop rcx\n"
  "  shr QWORD [rsp], cl\n" str.cat
end

// Params: store_variant, Token
// Return: Assembly
function get_store_asm str Token -> str :
  str.copy str.upper
  take store_variant token in

  // Get the correct size register for the store_variant
  if    store_variant "STORE_BYTE"  streq do "bl"
  elif  store_variant "STORE_WORD"  streq do "bx"
  elif  store_variant "STORE_DWORD" streq do "ebx"
  elif  store_variant "STORE_QWORD" streq do "rbx"
  else
    token
    "'" store_variant                  str.cat
    "' is not a valid STORE Intrinsic" str.cat
    "VALUE_ERROR" CompilerErrorWithToken ""
  endif
  take register in

  // Generate assembly
  "  pop rax\n"
  "  pop rbx\n"   str.cat
  "  mov [rax], " str.cat
  register        str.cat
  "\n"            str.cat
end

// Swap the top two items in the stack
// Params: None
// Return: Assembly
function get_swap_asm -> str :
  "  pop rax\n"
  "  push QWORD [rsp]\n"        str.cat
  "  mov QWORD [rsp+8], rax\n"  str.cat
end

// SYSCALL intrinsic variants call a Linux syscall.
// Different variants are named SYSCALL0 - SYSCALL6 by the amount of arguments.
// Params: Token.value.upper()
// Return: Assembly
function get_syscall_asm str -> str :

  // Get the Syscall variant's number
  7 swap str.char_at '0' -

  // Get argument registers used for syscalls (List[str])
  get_syscall_argument_registers
  0
  take
    index
    argument_registers
    syscall_args_count
  in

  // Generate assembly code
  "  pop rax ; syscall\n"
  while index syscall_args_count < do
    "  pop "                                    str.cat
    index argument_registers List.nth str.load  str.cat
    " ; "                                       str.cat

    index 1 + index = // index++
    index itoa                                  str.cat
    ". arg\n"                                   str.cat
  done

  "  syscall\n"                                 str.cat
  "  push rax ; return code\n"                  str.cat
end

function get_syscall_argument_registers -> List :
  List.init
  take registers in

  // Add Syscall argument registers in the correct order
  "rdi" cast(ptr) registers List.append
  "rsi" cast(ptr) registers List.append
  "rdx" cast(ptr) registers List.append
  "r10" cast(ptr) registers List.append
  "r8"  cast(ptr) registers List.append
  "r9"  cast(ptr) registers List.append
  registers
end

// Generate NASM x86_64 assembly file
// Params: file_name, sub_programs (List[Program]), List[Mem]
// Return: None
function generate_assembly_file
  file_name:str
  sub_programs:List[Program]
  memories:List[Mem]
:
  sub_programs cast(List) List.len
  "section .data\n" str.copy
  0
  take
    index
    data_section_asm
    sub_programs.len
  in

  // Write the beginning of the assembly to file
  memories file_name initialize_asm_file

  // Iterate over each Program in sub_programs
  while index sub_programs.len < do

    // Get the current Program
    index sub_programs cast(List) List.nth ptr.load cast(Program)
    take program in

    // Get assembly code for the current Program
    program file_name append_programs_assembly_code

    // Add strings from the program to the .data section
    program get_string_variables_for_data_section
    data_section_asm swap str.cat
    data_section_asm =

    index 1 + index = // index++
  done

  // Append .data section to the assembly file
  data_section_asm file_name append_file
end

// Get Assembly code to be added to .data section from Program's string variables
function get_string_variables_for_data_section program:Program -> str :
  "" str.copy
  0
  take index assembly_code in
  while index program cast(List) List.len < do
    // Get current Op
    index program cast(List) List.nth Op.load
    take op in

    // Add only strings to the assembly
    if op Op.type OpType.PUSH_STR != do
      index 1 + index =
      continue
    endif

    op    Op.id itoa
    op    Op.func Func.name
    op    Op.token
    dup   Token.value format_escape_sequences_for_nasm
    swap  Token.location
    take
      token_location
      string
      function_name
      op_id
    in

    "  "
    function_name str.cat
    "_s"          str.cat
    op_id         str.cat
    " db "        str.cat
    string        str.cat
    ",0\n"        str.cat

    assembly_code swap str.cat
    assembly_code =
    index 1 + index =
  done
  assembly_code
end

function format_escape_sequences_for_nasm string:str -> str :
  9  cast(char) char.to_string
  10 cast(char) char.to_string
  13 cast(char) char.to_string
  27 cast(char) char.to_string
  34 cast(char) char.to_string
  take
    DoubleQuote
    Escape
    CR
    LF
    Tab
  in

  // Replace escape sequences with valid assembly for NASM
  DoubleQuote ",9," str.cat DoubleQuote str.cat
  Tab string str.replace_all string =

  DoubleQuote ",10," str.cat DoubleQuote str.cat
  LF string str.replace_all string =

  DoubleQuote ",13," str.cat DoubleQuote str.cat
  CR string str.replace_all string =

  DoubleQuote ",27," str.cat DoubleQuote str.cat
  Escape string str.replace_all
end

// Pop a value from the data stack and push it to the return stack
function set_local_variable op:Op -> str :
  // Get the variable's index in the function's variable list
  op Op.func Func.variables
  op Op.token Token.value get_variable_index

  set_nth_from_return_stack_asm
end

// Push the value of the Nth value from the return stack to the data stack
function get_nth_from_return_stack_asm N:int -> str :
  if N 0 < do
    "Cannot get value with negative index from the return stack"
    "ValueError" CompilerError
  endif

  "  push QWORD [r14-"
  N 8 * 8 + itoa        str.cat
  "]\n"                 str.cat
end

// Pop a value from data stack and store it to a variable in the return stack
function set_nth_from_return_stack_asm N:int -> str :
  if N 0 < do
    "Cannot set value with negative index from the return stack"
    "ValueError" CompilerError
  endif

  "  pop rbx\n"
  "  mov [r14-"     str.cat
  N 8 * 8 + itoa    str.cat
  "], rbx\n"        str.cat
end

// Return the beginning of the assembly code of each Program
// Params: Func's name
// Return: Assembly code
function get_function_start_asm func:Func -> str :
  func Func.name
  func Func.variables cast(List) List.len
  take variable_count function_name in

  // MAIN Func differs from the others
  if function_name str.copy str.upper "MAIN" streq do
    "global _start\n"
    "_start:\n"                                               str.cat
    "  mov [args_ptr], rsp   ; Pointer to argc\n"             str.cat
    "  mov r14, return_stack\n"                               str.cat
    "  add r14, "                                             str.cat
    variable_count 8 * itoa                                   str.cat
    "\n"                                                      str.cat
    return
  endif

  function_name get_valid_label_for_nasm
  ":\n;; ["                                                   str.cat
  function_name                                               str.cat
  "] Save the return address to return stack\n"               str.cat
  "  add r14, "                                               str.cat
  variable_count 8 * 8 + itoa                                 str.cat
  " ; "                                                       str.cat
  variable_count itoa                                         str.cat
  " local variables\n"                                        str.cat
  "  pop QWORD [r14]     ; Save return address from stack\n"  str.cat
end

// Return the end of the assembly code of each Program
// Params: Func's name
// Return: Assembly code
function get_function_end_asm func:Func -> str :
  func Func.name
  func Func.variables cast(List) List.len
  take variable_count function_name in

  // MAIN Func differs from the others
  if function_name str.copy str.upper "MAIN" streq do
    ";; -- exit syscall\n"
    "  mov rax, sys_exit\n" str.cat
    "  pop rdi\n"           str.cat
    "  syscall\n\n"         str.cat
    return
  endif

  ";; ["
  function_name                                               str.cat
  "] Return to the address found in return stack\n"           str.cat
  "  push QWORD [r14]    ; Get function's return address\n"   str.cat
  "  sub r14, "                                               str.cat
  variable_count 8 * 8 + itoa                                 str.cat
  " ; "                                                       str.cat
  variable_count itoa                                         str.cat
  " local variables\n"                                        str.cat
  "  ret\n\n"                                                 str.cat
end

function append_programs_assembly_code file_name:str program:Program :
  program cast(List) List.len
  0
  take index program.len in

  // Get the Func's name to be added to the assembly code
  // Exception: MAIN Func should be named '_start'
  program cast(List) List.first ptr.load Op.func
  take func in

  // Write Func's start assembly to file
  func get_function_start_asm file_name append_file

  // Generate assembly for each Op in Program
  while index program.len < do

    // Get the current Op
    index program cast(List) List.nth Op.load
    take op in

    // Generate comment for Op
    op get_op_comment_asm file_name append_file

    // Concatenate Op's Assembly to op_asm
    program op get_op_asm file_name append_file

    // Append the current Op's assembly to file
    index 1 + index =
  done

  // Prepend the Func's beginning code and prepend the ending code
  func get_function_end_asm file_name append_file
end

// Returns the current IF block's ENDIF Op
// Params: Op, Program
// Return: Op
function get_related_endif op:Op program:Program -> Op :
  op Op.id 1 + // index = op.id + 1
  0 // if_count => Keep count of the nested IF blocks
  take if_count index in

  while index program cast(List) List.len < do
    index program cast(List) List.nth Op.load
    dup Op.type
    take current_op_type current_op in

    // Return the found ENDIF if it's not inside nested IF block
    if current_op_type OpType.ENDIF == do
      if if_count 0 == do
        current_op return
      endif
      if_count 1 - if_count = // if_count--
    endif

    // Increment if_count when nested blocks are found
    if current_op_type OpType.IF == do
      if_count 1 + if_count = // if_count++
    endif

    index 1 + index = // index++
  done

  // Report error when corresponding ENDIF was not found
  op Op.token
  "Corresponding ENDIF keyword was not found.\n"
  op Op.token Token.value str.copy str.upper
  "AMBIGUOUS_" swap str.cat CompilerErrorWithToken
  NULL cast(Op)
end

// Returns the current WHILE block's DONE Op
// Params: Op, Program
// Return: Op
function get_parent_while op:Op program:Program -> Op :
  op Op.id 1 - // index = op.id - 1
  0 // done_count => Keep count of the nested WHILE blocks
  take done_count index in

  while index -1 > do
    index program cast(List) List.nth Op.load
    dup Op.type
    take current_op_type current_op in

    // Return the found ENDIF if it's not inside nested IF block
    if current_op_type OpType.WHILE == do
      if done_count 0 == do
        current_op return
      endif
      done_count 1 - done_count = // done_count--
    endif

    // Increment done_count when nested blocks are found
    if current_op_type OpType.DONE == do
      done_count 1 + done_count = // done_count++
    endif

    index 1 - index = // index--
  done

  // Report error when parent WHILE was not found
  op Op.token
  "Parent WHILE keyword was not found.\n"
  op Op.token Token.value str.copy str.upper
  "AMBIGUOUS_" swap str.cat
  CompilerErrorWithToken
  NULL cast(Op)
end

// Returns the END Operand for the current WHILE block
// Params: Op, Program
// Return: Op
function get_done_op_for_while op:Op program:Program -> Op :
  op Op.id
  0
  take while_count index in

  // Iterate over each Op of the Program starting from the parameter Op
  while index program cast(List) List.len < do

    // Get the current Operands OpType
    index program cast(List) List.nth Op.load
    dup Op.type
    take current_op_type current_op in

    // Return the found DONE if it's not inside nested WHILE block
    if current_op_type OpType.DONE == do
      while_count 1 - while_count = // while_count--
      if while_count 0 == do
        current_op return
      endif
    endif

    // Increment while_count when nested WHILE blocks are found
    if current_op_type OpType.WHILE == do
      while_count 1 + while_count = // while_count++
    endif

    index 1 + index = // index++
  done

  // Report error when END Keyword was not found for the WHILE block
  op Op.token
  "END keyword was not found for the current WHILE loop.\n"
  op Op.token Token.value str.copy str.upper
  "AMBIGUOUS_" swap str.cat CompilerErrorWithToken
  NULL cast(Op)
end

// Generate valid NASM label for Func
// Params: function_name
// Return: label
function get_valid_label_for_nasm function_name:str -> str :
  function_name base64.encode

  // Replace special characters that are not supported by NASM
  "_" "=" rot str.replace_all
  "@" "+" rot str.replace_all
end
