include "std"
include "compiler/class/Op"
include "compiler/class/Token"

// Create Array of integer types
// TODO: Enable creating constant arrays
// Params None
// Return
//    INTEGER_TYPES: Array
function INTEGER_TYPES -> ptr :
  5 Array.init
  take array in
  TokenType.ANY   ptr array Array.append
  TokenType.BOOL  ptr array Array.append
  TokenType.CHAR  ptr array Array.append
  TokenType.INT   ptr array Array.append
  TokenType.UINT8 ptr array Array.append
  array
end

// Create Array of pointer types
// TODO: Enable creating constant arrays
// Params None
// Return
//    POINTER_TYPES: Array
function POINTER_TYPES -> ptr :
  3 Array.init
  take array in
  TokenType.ANY   ptr array Array.append
  TokenType.PTR   ptr array Array.append
  TokenType.STR   ptr array Array.append
  array
end

// Type check every sub-program in the application
// Params
//    sub_programs: List[Program]
//    functions: List[Function]
// Return None
function type_check_application ptr ptr :
  dup List.len
  0
  take
    index
    sub_programs.len
    sub_programs
    functions
  in
  while index sub_programs.len < do
    index sub_programs List.nth ptr.load
    take sub_program in

    sub_program List.first ptr.load Op.get_function
    take func in

    functions func sub_program type_check_sub_program
    index 1 + index =
  done
end

// Type check a sub-program ("function")
// Params
//    program: Program
//    func: Function
//    functions: List[Function]
// Return None
function type_check_sub_program ptr ptr ptr :
  dup List.len
  0
  take
    index
    program.len
    program
    func
    functions
  in
  // Generate initial type stack for sub program
  // based on the function params
  List.init dup
  func get_function_type_stack
  swap List.append
  take branched_stacks in

  // Type check every Op in Program
  while index program.len < do
    index program List.nth ptr.load
    take op in
    functions program branched_stacks op type_check_op
    index 1 + index =
  done
end

// Type check the current Op in the Program
// Raise compiler error if the type checking fails
// Params
//    op: Op
//    branched_stacks: List[TypeStack]
//    program: Program
//    functions: List[Function]
// Return None
function type_check_op ptr ptr ptr ptr :
  take
    op
    branched_stacks
    program
    functions
  in
  op  Op.get_token
  dup Token.get_value
  op  Op.get_type
  branched_stacks List.last ptr.load
  take
    type_stack
    op_type
    token_value
    token
  in

  // Switch like if block with every type of Op
  if op_type OpType.INTRINSIC == do
    type_stack token type_check_intrinsic return
  elif op_type OpType.CAST_BOOL == do
    type_stack token type_check_cast_bool return
  elif op_type OpType.CAST_CHAR == do
    type_stack token type_check_cast_char return
  elif op_type OpType.CAST_INT == do
    type_stack token type_check_cast_int return
  elif op_type OpType.CAST_PTR == do
    type_stack token type_check_cast_ptr return
  elif op_type OpType.CAST_STR == do
    type_stack token type_check_cast_str return
  elif op_type OpType.CAST_UINT8 == do
    type_stack token type_check_cast_uint8 return
  elif op_type OpType.DO == do
    type_stack token type_check_do return
  elif op_type OpType.PUSH_BOOL == do
    type_stack type_check_push_bool return
  elif op_type OpType.PUSH_CHAR == do
    type_stack type_check_push_char return
  elif op_type OpType.PUSH_INT == do
    type_stack type_check_push_int return
  elif op_type OpType.PUSH_PTR == do
    type_stack type_check_push_ptr return
  elif op_type OpType.PUSH_STR == do
    type_stack type_check_push_str return
  elif op_type OpType.PUSH_UINT8 == do
    type_stack type_check_push_uint8 return
  elif
    token_value str.upper
    get_not_typed_tokens
    List.contains_str
  do
    token_value puts "\n" puts
    0 exit
    return
  endif

  // Type checking certain OpType is not implemented
  "Parsing token '"
  token_value str.cat
  "' is not implemented yet" str.cat
  NotImplementedError
end

// Type check an intrinsic
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_intrinsic ptr ptr :
  dup Token.get_value str.upper
  take
    intrinsic
    token
    type_stack
  in

  // Switch like if block with every type of Intrinsic
  if
    intrinsic "AND" streq
    intrinsic "OR"  streq ||
  do
    type_stack token type_check_bitwise return
  elif
    intrinsic "MINUS" streq
    intrinsic "MUL"   streq ||
    intrinsic "PLUS"  streq ||
  do
    type_stack token type_check_calculations return
  elif
    intrinsic "EQ"  streq
    intrinsic "GE"  streq ||
    intrinsic "GT"  streq ||
    intrinsic "LE"  streq ||
    intrinsic "LT"  streq ||
    intrinsic "NE"  streq ||
  do
    type_stack token type_check_comparison return
  endif

  // Type checking certain Intrinsic is not implemented
  "Type checking for '"
  intrinsic str.cat
  "' has not been implemented." str.cat
  NotImplementedError
end

// CAST_BOOL explicitely casts the top element of the stack to BOOL type.
// The top element must be an integer to be cast to BOOL.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_bool ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif type INTEGER_TYPES Array.contains_int not do
    token
    "Only integer-like values can be cast to BOOL\nPopped type: "
    type token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
  TokenType.BOOL ptr type_stack LinkedList.push
end

// CAST_CHAR explicitely casts the top element of the stack to CHAR type.
// The top element must be in INTEGER_TYPES to be cast to CHAR.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_char ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif type TokenType.BOOL == do
    token
    "A boolean value cannot be cast to CHAR"
    "VALUE_ERROR" CompilerErrorWithToken
  elif type INTEGER_TYPES Array.contains_int not do
    token
    "Only integer-like values can be cast to CHAR\nPopped type: "
    type token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
  TokenType.CHAR ptr type_stack LinkedList.push
end

// CAST_INT explicitely casts the top element of the stack to INT type.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_int ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  endif
  TokenType.INT ptr type_stack LinkedList.push
end

// CAST_PTR explicitely casts the top element of the stack to PTR type.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_ptr ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif
    type TokenType.BOOL ==
    type TokenType.CHAR ==
    ||
  do
    token
    type token_type_repr " cannot be cast to PTR" str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
  TokenType.PTR ptr type_stack LinkedList.push
end

// CAST_STR explicitely casts the top element of the stack to STR type.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_str ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif type POINTER_TYPES Array.contains_int not do
    token
    type token_type_repr " cannot be cast to STR" str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
  TokenType.STR ptr type_stack LinkedList.push
end

// CAST_UINT8 explicitely casts the top element of the stack to UINT8 type.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_cast_uint8 ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif type INTEGER_TYPES Array.contains_int not do
    token
    "Only integer-like values can be cast to UINT8\nPopped type: "
    type token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
  TokenType.UINT8 ptr type_stack LinkedList.push
end

// DO Keyword pops one boolean from the stack
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_do ptr ptr :
  take token type_stack in
  type_stack LinkedList.pop int
  take type in

  if type -1 == do
    token "The stack is empty" "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  elif type TokenType.BOOL != do
    token
    "DO requires a boolean\nPopped type: "
    type token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif
end

// Push a boolean to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_bool ptr :
  TokenType.BOOL ptr swap LinkedList.push
end

// Push a character to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_char ptr :
  TokenType.CHAR ptr swap LinkedList.push
end

// Push an integer to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_int ptr :
  TokenType.INT ptr swap LinkedList.push
end

// Push a pointer to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_ptr ptr :
  TokenType.PTR ptr swap LinkedList.push
end

// Push a string to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_str ptr :
  TokenType.STR ptr swap LinkedList.push
end

// Push an unsigned 8-bit integer to the stack
// Params
//    type_stack: LinkedList
// Return None
function type_check_push_uint8 ptr :
  TokenType.UINT8 ptr swap LinkedList.push
end

// Type check bitwise operation for two integers
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_bitwise ptr ptr :
  dup Token.get_value
  take
    token_value
    token
    type_stack
  in

  // Pop two items from the stack
  type_stack LinkedList.pop int
  type_stack LinkedList.pop int
  take t2 t1 in

  // Not enough values in the stack
  if t2 -1 == do
    token
    token_value " intrinsic requires two integers" str.cat
    "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  // Wrong token type
  elif
    t1 INTEGER_TYPES Array.contains_int not
    t2 INTEGER_TYPES Array.contains_int not
    ||
  do
    token
    token_value " intrinsic requires two integers\n\n" str.cat
    "Popped types:\n" str.cat
    t1 token_type_repr str.cat "\n" str.cat
    t2 token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif

  // Push the result to the stack
  TokenType.INT ptr type_stack LinkedList.push
end

// Type check calculation intrinsics MINUS, MUL, and PLUS
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_calculations ptr ptr :
  dup Token.get_value
  take
    token_value
    token
    type_stack
  in

  // Pop two items from the stack
  type_stack LinkedList.pop int
  type_stack LinkedList.pop int
  take t2 t1 in

  // Not enough values in the stack
  if t2 -1 == do
    token
    token_value " requires two values on the stack" str.cat
    "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  // Wrong token type
  elif
    t1 INTEGER_TYPES Array.contains_int not
    t2 INTEGER_TYPES Array.contains_int not
    ||
  do
    token
    token_value " intrinsic requires two integers\n\n" str.cat
    "Popped types:\n" str.cat
    t1 token_type_repr str.cat "\n" str.cat
    t2 token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif

  // Push the result to the stack
  TokenType.INT ptr type_stack LinkedList.push
end

// Type check comparison intrinsics like EQ or GE.
// Comparison intrinsics take two elements from the stack
// and pushes a boolean result of the comparison.
// Params
//    token: Token
//    type_stack: LinkedList
// Return None
function type_check_comparison ptr ptr :
  dup Token.get_value
  take
    token_value
    token
    type_stack
  in

  // Pop two items from the stack
  type_stack LinkedList.pop int
  type_stack LinkedList.pop int
  take t2 t1 in

  // Not enough values in the stack
  if t2 -1 == do
    token
    token_value " requires two values on the stack" str.cat
    "POP_FROM_EMPTY_STACK" CompilerErrorWithToken
  // Wrong token type
  elif
    t1 INTEGER_TYPES Array.contains_int not
    t2 INTEGER_TYPES Array.contains_int not
    ||
  do
    token
    token_value " intrinsic requires two integers\n\n" str.cat
    "Popped types:\n" str.cat
    t1 token_type_repr str.cat "\n" str.cat
    t2 token_type_repr str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  endif

  // Push the result to the stack
  TokenType.BOOL ptr type_stack LinkedList.push
end

// Get a list of tokens that do not require type checking
// TODO: This list should be a constant somehow
// Params
//    op: Op
// Return None
function get_not_typed_tokens -> ptr :
  // ["BREAK", "CONTINUE", "PEEK", "TAKE", "WHILE"]
  List.init take not_typed_tokens in
  "BREAK"     ptr not_typed_tokens List.append
  "CONTINUE"  ptr not_typed_tokens List.append
  "PEEK"      ptr not_typed_tokens List.append
  "TAKE"      ptr not_typed_tokens List.append
  "WHILE"     ptr not_typed_tokens List.append
  not_typed_tokens
end

// Generate TypeStack for a function
// Params
//    func: Function
// Return
//    type_stack: LinkedList
function get_function_type_stack ptr -> ptr :
  take func in
  func Function.get_signature Signature.get_params
  dup List.len 1 -
  LinkedList.init
  take
    type_stack
    index
    params
  in

  // Insert all parameter types to type_stack in the reverse order
  while index 0 >= do
    // Push the current parameters TokenType to type_stack
    index params List.nth ptr.load
    type_stack LinkedList.push
    index 1 - index =
  done
  type_stack
end
