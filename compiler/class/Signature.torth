include "std"
include "compiler/defs"
include "compiler/utils"
class Signature
  params:ptr
  returns:ptr

  method init param_types:ptr return_types:ptr -> ptr :
    Signature.size malloc
    take signature in

    param_types   signature Signature->params
    return_types  signature Signature->returns
    signature
  end

  // Get TokenType from certain type in function definition
  method type_map type:str -> int :
    type str.copy str.upper
    take type_upper in

    if type_upper "ANY" streq do
      TokenType.ANY return
    elif type_upper "BOOL" streq do
      TokenType.BOOL return
    elif type_upper "CHAR" streq do
      TokenType.CHAR return
    elif type_upper "INT" streq do
      TokenType.INT return
    elif type_upper "PTR" streq do
      TokenType.PTR return
    elif type_upper "STR" streq do
      TokenType.STR return
    elif type_upper "UINT8" streq do
      TokenType.UINT8 return
    else
      "'" type                   str.cat
      "' is not valid TokenType" str.cat
      "FUNCTION_SIGNATURE_ERROR" CompilerError 0 exit
      NULL
    endif
  end

  method repr self:ptr -> str :
    self Signature.returns
    self Signature.params
    ""    str.copy
    dup   str.copy
    0
    take
      index
      params_repr
      returns_repr
      params
      returns
    in

    // Set empty Signature parts as None
    if params List.len 0 == do
      "None " params_repr =
    endif
    if returns List.len 0 == do
      "None" returns_repr =
    endif

    // Generate repr from Signature.params
    while index params List.len < do
      index params List.nth int.load TokenType.repr " " str.cat
      params_repr swap str.cat params_repr =
      index 1 + index =
    done

    // Generate repr from Signature.returns
    0 index =
    while index returns List.len < do
      index returns List.nth int.load TokenType.repr " " str.cat
      returns_repr swap str.cat returns_repr =
      index 1 + index =
    done
    params_repr "-> " str.cat
    returns_repr      str.cat
  end
endclass

