include "std"
include "compiler/utils"

// Signature(params: List[TokenType], returns: List[TokenType])
ENUM Signature.size 8 :
  Signature.params      // List[TokenType]  => ptr
  Signature.returns     // List[TokenType]  => ptr
END

// Allocate memory for Signature and the TokenType lists in it
// Params
//    param_names: List[str]
//    param_types: List[TokenType]
//    return_types: List[TokenType]
// Return: Signature
function Signature.init ptr ptr -> ptr :
  Signature.size malloc
  take
    signature
    param_types
    return_types
  in

  param_types   signature Signature.params        ptr+ ptr.store
  return_types  signature Signature.returns       ptr+ ptr.store
  signature
end

// Get Signature.params
// Params: Pointer to Signature (PTR)
// Return: Signature.params (PTR)
function Signature.get_params ptr -> ptr :
  ptr.load
end

// Get Signature.returns
// Params: Pointer to Signature (PTR)
// Return: Signature.returns (PTR)
function Signature.get_returns ptr -> ptr :
  Signature.returns ptr+ ptr.load
end

// Get TokenType from certain type in function definition
function Signature.type_map str -> int :
  dup str.copy str.upper
  take type_upper type in

  if type_upper "ANY" streq do
    TokenType.ANY return
  elif type_upper "BOOL" streq do
    TokenType.BOOL return
  elif type_upper "CHAR" streq do
    TokenType.CHAR return
  elif type_upper "INT" streq do
    TokenType.INT return
  elif type_upper "PTR" streq do
    TokenType.PTR return
  elif type_upper "STR" streq do
    TokenType.STR return
  elif type_upper "UINT8" streq do
    TokenType.UINT8 return
  else
    "'" type                      str.cat
    "' is not valid TokenType\n"  str.cat
    "FUNCTION_SIGNATURE_ERROR" CompilerError 0 exit
    NULL
  endif
end

function Signature.repr ptr -> str :
  dup   Signature.get_returns
  swap  Signature.get_params
  ""    str.copy
  dup   str.copy
  0
  take
    index
    params_repr
    returns_repr
    params
    returns
  in

  // Set empty Signature parts as None
  if params List.len 0 == do
    "None " params_repr =
  endif
  if returns List.len 0 == do
    "None" returns_repr =
  endif

  // Generate repr from Signature.params
  while index params List.len < do
    index params List.nth int.load TokenType.repr " " str.cat
    params_repr swap str.cat params_repr =
    index 1 + index =
  done

  // Generate repr from Signature.returns
  0 index =
  while index returns List.len < do
    index returns List.nth int.load TokenType.repr " " str.cat
    returns_repr swap str.cat returns_repr =
    index 1 + index =
  done
  params_repr "-> " str.cat
  returns_repr      str.cat
end
