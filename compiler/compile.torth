include "std"
include "compiler/error"
include "compiler/utils"

// Compile and link the assembly file with NASM and LD
// Params: out_file (STR)
function compile_executable out_file:str :
  // Compile assembly code file to an object file with NASM
  out_file compile_with_nasm& exec_forked

  // Link the object file to an executable with LD
  out_file link_with_ld& exec_forked
end

// Compile assembly code file to object file with NASM
function compile_with_nasm out_file:str :
  out_file str.copy ".o"   str.cat
  out_file str.copy ".asm" str.cat
  List.init // Allocate memory for arguments
  take
    argv
    asm_file
    object_file
  in

  "nasm"      cast(ptr) argv List.append
  "-felf64"   cast(ptr) argv List.append
  "-o"        cast(ptr) argv List.append
  object_file cast(ptr) argv List.append
  asm_file    cast(ptr) argv List.append
  NULLPTR argv List.first "/usr/bin/nasm" execve drop
end

// Link object file with LD
function link_with_ld out_file:str :
  out_file str.copy ".o" str.cat
  List.init // Allocate memory for arguments
  take argv object_file in

  "ld"            cast(ptr) argv List.append
  "-melf_x86_64"  cast(ptr) argv List.append
  "-o"            cast(ptr) argv List.append
  out_file        cast(ptr) argv List.append
  object_file     cast(ptr) argv List.append
  NULLPTR argv List.first "/usr/bin/ld" execve drop
end

// Remove files generated during compilation
// Params
//    out_file: str
// Return None
function remove_compilation_files out_file:str :
  // Remove Assembly file
  f"{out_file}.asm" remove_file& exec_forked

  // Remove object file
  f"{out_file}.o" remove_file& exec_forked
end
