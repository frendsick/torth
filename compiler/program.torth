// program.torth
// Generating the intermediate representation of the program
include "std"
include "typing"
include "compiler/defs"
include "compiler/class/Token"

// Generate Program from Function
// Params: Function
// Return: Program
function generate_program ptr -> ptr :
  Function.tokens ptr+ ptr.load
  list.init
  0
  take
    index
    program
    tokens
  in

  "Iterating Tokens\n" puts
  while index tokens list.len < do
    // Get current Token
    tokens list.first
    index ptr.size * ptr+ ptr.load
    take token in

    // Save a copy of Token's value in uppercase
    token Token.get_value str.copy str.upper
    token Token.get_type
    take
      token_type
      token_upper
    in

    if token_type TokenType.BOOL == do
      "[TODO] BOOL\n" NotImplementedError 0 exit
    elif token_type TokenType.CHAR == do
      "[TODO] CHAR\n" NotImplementedError
    elif token_type TokenType.INT == do
      "[TODO] INT\n" NotImplementedError
    elif token_type TokenType.STR == do
      "[TODO] STR\n" NotImplementedError
    elif token_type TokenType.UINT8 == do
      "[TODO] UINT8\n" NotImplementedError
    else
      "[TODO] Unknown Token '" puts
      token Token.get_value puts "'\n" puts 0 exit
    endif
    index 1 + index =
  done
  0 exit
  program
end

function get_sub_programs ptr -> ptr :
  list.init // sub_programs = List[Program]
  0         // index
  take
    index
    sub_programs
    functions
  in

  // Iterate over every Function is functions
  while index functions list.len < do

    // Generate Program from the current Function
    index functions list.nth ptr.load
    generate_program

    // Append the generated Program to sub_programs
    sub_programs list.append
    sub_programs =
    index 1 + index = // index++
  done
  sub_programs
end
