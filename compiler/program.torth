// program.torth
// Generating the intermediate representation of the program
include "std"
include "typing"
include "compiler/defs"
include "compiler/class/Token"

// Generate Program for each Function
// Params: List[Function], List[Constant], List[Memory]
// Return: List[Program]
function get_sub_programs
  functions:ptr
  constants:ptr
  memories:ptr
-> ptr :

  List.init // sub_programs = List[Program]
  0         // index
  take index sub_programs in

  // Iterate over every Function is functions
  while index functions List.len < do

    // Get the current Function from the list
    index functions List.nth ptr.load
    take func in

    // Generate Program from the current Function
    memories functions constants func generate_program

    // Append the generated Program to sub_programs
    sub_programs List.append
    index 1 + index = // index++
  done
  sub_programs
end

// Generate Program from Function
// Params: Function, List[Function], List[Constant], List[Memory]
// Return: Program
function generate_program
  func:ptr
  functions:ptr
  constants:ptr
  memories:ptr
-> ptr :

  func Function.tokens ptr+ ptr.load
  List.init
  0
  take
    index
    program
    tokens
  in

  while index tokens List.len < do
    // Get current Token
    tokens List.first
    index ptr.size * ptr+ ptr.load
    take token in

    // Get the Token's OpType
    memories functions constants token get_tokens_op_type
    take op_type in

    // Append Op to Program
    func token op_type index Op.init
    program List.append
    index 1 + index = // index++
  done
  program
end

// Get OpType for Token
// Params: Token, List[Function], List[Constant], List[Memory]
// Return: OpType
function get_tokens_op_type
  token:ptr
  functions:ptr
  constants:ptr
  memories:ptr
-> int :

  // Initialize variables
  token Token.get_type
  token Token.get_value
  dup str.copy str.upper
  take
    token_upper
    token_value
    token_type
  in

  if token_type TokenType.BOOL ==    do
    OpType.PUSH_BOOL return
  elif token_type TokenType.CHAR ==  do
    OpType.PUSH_CHAR return
  elif token_type TokenType.INT ==   do
    OpType.PUSH_INT return
  elif token_type TokenType.STR ==   do
    OpType.PUSH_STR return
  elif token_type TokenType.UINT8 == do
    OpType.PUSH_UINT8 return
  elif token_upper "ASSIGN"   streq  do
    OpType.ASSIGN_BIND return
  elif token_upper "BOOL"     streq  do
    OpType.CAST_BOOL return
  elif token_upper "BREAK"    streq  do
    OpType.BREAK return
  elif token_upper "CHAR"     streq  do
    OpType.CAST_CHAR return
  elif token_upper "CONTINUE" streq  do
    OpType.CONTINUE return
  elif token_upper "DO"       streq  do
    OpType.DO return
  elif token_upper "DONE"     streq  do
    OpType.DONE return
  elif token_upper "ELIF"     streq  do
    OpType.ELIF return
  elif token_upper "ELSE"     streq  do
    OpType.ELSE return
  elif token_upper "END"      streq  do
    OpType.END return
  elif token_upper "ENDIF"    streq  do
    OpType.ENDIF return
  elif token_upper "IF"       streq  do
    OpType.IF return
  elif token_upper "IN"       streq  do
    OpType.IN return
  elif token_upper "INT"      streq  do
    OpType.CAST_INT return
  elif token_upper "PEEK"     streq  do
    OpType.PEEK return
  elif token_upper "PTR"      streq  do
    OpType.CAST_PTR return
  elif token_upper "RETURN"   streq  do
    OpType.RETURN return
  elif token_upper "STR"      streq  do
    OpType.CAST_STR return
  elif token_upper "TAKE"     streq  do
    OpType.TAKE return
  elif token_upper "UINT8"    streq  do
    OpType.CAST_UINT8 return
  elif token_upper "WHILE"    streq  do
    OpType.WHILE return
  elif token Token.get_vartype VarType.NONE != do
    token Token.get_vartype
    take token_vartype in

    // Check the VarType of the Token
    if token_vartype VarType.PEEK == do
      OpType.PEEK_BIND return
    elif token_vartype VarType.PUSH == do
      OpType.PUSH_BIND return
    elif token_vartype VarType.TAKE == do
      OpType.POP_BIND return
    endif

    "Unknown VarType '" token_vartype itoa str.cat
    "VALUE_ERROR" CompilerError
  elif constants token_value constant_exists do
    OpType.PUSH_INT return
  elif functions token_value function_exists do
    OpType.FUNCTION_CALL return
  elif memories token_value memory_exists do
    OpType.PUSH_PTR return
  // Intrinsics
  elif
    token_upper "AND"         streq
    token_upper "ARGC"        streq ||
    token_upper "ARGV"        streq ||
    token_upper "DIVMOD"      streq ||
    token_upper "DROP"        streq ||
    token_upper "DUP"         streq ||
    token_upper "ENVP"        streq ||
    token_upper "EQ"          streq ||
    token_upper "GE"          streq ||
    token_upper "GT"          streq ||
    token_upper "DUP"         streq ||
    token_upper "LE"          streq ||
    token_upper "LOAD_" str.startswith ||
    token_upper "LT"          streq ||
    token_upper "MINUS"       streq ||
    token_upper "MUL"         streq ||
    token_upper "NE"          streq ||
    token_upper "NTH"         streq ||
    token_upper "OR"          streq ||
    token_upper "OVER"        streq ||
    token_upper "PLUS"        streq ||
    token_upper "PRINT"       streq ||
    token_upper "ROT"         streq ||
    token_upper "SHL"         streq ||
    token_upper "SHR"         streq ||
    token_upper "STORE_" str.startswith ||
    token_upper "SWAP"        streq ||
    token_upper "SYSCALL0"    streq ||
    token_upper "SYSCALL1"    streq ||
    token_upper "SYSCALL2"    streq ||
    token_upper "SYSCALL3"    streq ||
    token_upper "SYSCALL4"    streq ||
    token_upper "SYSCALL5"    streq ||
    token_upper "SYSCALL6"    streq ||
  do
    OpType.INTRINSIC return
  endif

  // Report error when Op was not found
  "Operation '"
  token Token.get_value str.cat
  "' is not found"      str.cat
  "OP_NOT_FOUND" CompilerError
  NULL 0 exit
end
