// program.torth
// Generating the intermediate representation of the program
include "std"
include "typing"
include "compiler/defs"
include "compiler/class/Token"

// Generate Program for each Func
function get_sub_programs
  functions:List[Func]
  constants:List[Constant]
-> List[Program] :

  List.init cast(List[Program])
  List.init
  take
    parsed_functions
    sub_programs
  in

  // Parse and update used functions until all used functions are parsed
  TRUE take functions_left in
  while functions_left do
    FALSE functions_left =

    // Parse all used functions
    0 take index in
    while index functions cast(List) List.len < do

      // Get the current Func from the list
      index functions cast(List) List.nth Func.load
      take func in

      // Parse used function that is not already parsed
      if
        func Func.is_used
        func Func.name parsed_functions List.contains_str not
        &&
      do
        // Generate Program from the current Func
        constants functions func generate_program

        // Append the generated Program to sub_programs
        sub_programs cast(List) List.append

        // Mark the function as parsed
        func Func.name parsed_functions List.append
        TRUE functions_left =
      endif

      index 1 + index = // index++
    done
  done

  // Remove unused sub_programs
  sub_programs cast(List) List.len 1 -
  take index in

  while index 0 >= do

    // Get current sub program from the list
    index sub_programs cast(List) List.nth ptr.load cast(List)
    take program in

    // Remove the sub program if it is not used
    if program List.first Op.load Op.func Func.is_used not do
        index sub_programs cast(List) List.pop
    endif

    index 1 - index =
  done

  sub_programs
end

// Generate Program from Func
// Params: Func, List[Func], List[Constant]
// Return: Program
function generate_program
  func:Func
  functions:List[Func]
  constants:List[Constant]
-> Program :

  func Func.tokens
  List.init cast(Program)
  0
  take
    index
    program
    tokens
  in

  while index tokens cast(List) List.len < do
    // Get current Token
    index tokens cast(List) List.nth Token.load
    take token in

    // Get the Token's OpType
    constants functions token get_tokens_op_type
    take op_type in
    if op_type OpType.NONEXISTENT == do
      token
      f"Operation '{token Token.value}' is unknown"
      "OP_NOT_FOUND" CompilerErrorWithToken
    endif

    // Append Op to Program
    func token op_type index Op.init
    program cast(List) List.append
    index 1 + index = // index++
  done
  program
end

// Get OpType for Token
// Params: Token, List[Func], List[Constant]
// Return: OpType
function get_tokens_op_type
  token:Token
  functions:List[Func]
  constants:List[Constant]
-> int :
  // Assert that every OpType has been taken into account
  if OpType.len 31 != do
    "All OpTypes are not taken into account in `get_tokens_op_type` function.\n"
    "ASSERTION_ERROR" CompilerError
  endif

  // Initialize variables
  token Token.type
  token Token.value
  dup str.copy str.upper
  take
    token_upper
    token_value
    token_type
  in

  if token_type "bool"        streq  do
    OpType.PUSH_BOOL return
  elif token_type "char"      streq  do
    OpType.PUSH_CHAR return
  elif token_type "cstr"      streq  do
    OpType.PUSH_CSTR return
  elif token_type "int"       streq  do
    OpType.PUSH_INT return
  elif token_type "str"       streq  do
    OpType.PUSH_STR return
  elif token_upper "ASSIGN"   streq  do
    OpType.ASSIGN_BIND return
  elif token_upper "BREAK"    streq  do
    OpType.BREAK return
  elif token_upper "CONTINUE" streq  do
    OpType.CONTINUE return
  elif token_upper "DO"       streq  do
    OpType.DO return
  elif token_upper "DONE"     streq  do
    OpType.DONE return
  elif token_upper "ELIF"     streq  do
    OpType.ELIF return
  elif token_upper "ELSE"     streq  do
    OpType.ELSE return
  elif token_upper "END"      streq  do
    OpType.END return
  elif token_upper "ENDIF"    streq  do
    OpType.ENDIF return
  elif token_upper "IF"       streq  do
    OpType.IF return
  elif token_upper "IN"       streq  do
    OpType.IN return
  elif token_upper "PEEK"     streq  do
    OpType.PEEK return
  elif token_upper "RETURN"   streq  do
    OpType.RETURN return
  elif token_upper "TAKE"     streq  do
    OpType.TAKE return
  elif token_upper "TYPEOF"   streq  do
    OpType.TYPEOF return
  elif token_upper "WHILE"    streq  do
    OpType.WHILE return
  elif
    // CAST(<type>)
    token_upper "CAST(" str.startswith
    token_upper ")"     str.endswith
    &&
  do
    OpType.CAST return
  elif token Token.vartype VarType.NONE != do
    token Token.vartype
    take token_vartype in

    // Check the VarType of the Token
    if token_vartype VarType.PEEK == do
      OpType.PEEK_BIND return
    elif token_vartype VarType.PUSH == do
      OpType.PUSH_BIND return
    elif token_vartype VarType.TAKE == do
      OpType.POP_BIND return
    endif

    token
    "Unknown VarType '" token_vartype itoa str.cat
    "VALUE_ERROR" CompilerErrorWithToken
  elif functions token_value function_exists do
    functions token_value get_function_by_name
    take func in

    // Mark function as used
    TRUE func Func->is_used

    // Inline function call
    if func Func.is_inline do
      OpType.INLINE_FUNCTION_CALL return
    endif

    // Regular function call
    OpType.FUNCTION_CALL return
  elif functions "&" token_value str.removesuffix function_exists do
    // Mark function as used
    functions "&" token_value str.removesuffix get_function_by_name
    TRUE swap Func->is_used

    OpType.PUSH_FN return
  // Intrinsics
  elif
    token_upper "AND"         streq
    token_upper "ARENA"       streq ||
    token_upper "ARGC"        streq ||
    token_upper "ARGV"        streq ||
    token_upper "DIV"         streq ||
    token_upper "DROP"        streq ||
    token_upper "DUP"         streq ||
    token_upper "ENVP"        streq ||
    token_upper "EXEC"        streq ||
    token_upper "EQ"          streq ||
    token_upper "GE"          streq ||
    token_upper "GT"          streq ||
    token_upper "LE"          streq ||
    token_upper "LOAD_" str.startswith ||
    token_upper "LT"          streq ||
    token_upper "MINUS"       streq ||
    token_upper "MOD"         streq ||
    token_upper "MUL"         streq ||
    token_upper "NE"          streq ||
    token_upper "OR"          streq ||
    token_upper "OVER"        streq ||
    token_upper "PLUS"        streq ||
    token_upper "ROT"         streq ||
    token_upper "SHL"         streq ||
    token_upper "SHR"         streq ||
    token_upper "STORE_" str.startswith ||
    token_upper "SWAP"        streq ||
    token_upper "SYSCALL0"    streq ||
    token_upper "SYSCALL1"    streq ||
    token_upper "SYSCALL2"    streq ||
    token_upper "SYSCALL3"    streq ||
    token_upper "SYSCALL4"    streq ||
    token_upper "SYSCALL5"    streq ||
    token_upper "SYSCALL6"    streq ||
  do
    OpType.INTRINSIC return
  endif

  OpType.NONEXISTENT // Token's OpType could not be determined
end
