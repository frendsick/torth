// utils.torth - Utility functions for Torth compiler
include "std"
include "argparser"
include "compiler/defs"
include "compiler/class/Location"
include "compiler/class/Signature"
include "compiler/class/Token"

// Parse command line arguments with Argparser
// Params: None
// Return: Argparser
function parse_command_line_arguments -> ptr :
  "Torth compiler" Argparser.init
  take parser in
  False "FILE" "Output file" "--out"                parser Argparser.add_argument
  False "FILE" "Run program after compilation" "-r" parser Argparser.add_argument
  True  "FILE" "Input file" "code_file"             parser Argparser.add_argument
  parser Argparser.parse_args
  parser
end

// Get the output file name from command line arguments
// Params: Argparser
// Return: file_name
function get_output_file_name ptr -> str :
  "--out" swap Argparser.get_argument
  take file_name in

  if file_name ptr int NULL == do
    "a.bin" return
  endif
  file_name
end

// Check if a Constant with a certain name exists
// Params: constant_name, List[Constant]
// Return: bool
function constant_exists str ptr -> bool :
  0
  take
    index
    constant_name
    constants
  in

  // Iterate over constants and check if a Constant with certain name exists
  while index constants List.len < do

    // Get the current Constant
    index constants List.nth ptr.load Constant.get_name
    take current_name in

    // Return True if current Constant's name matches constant_name parameter
    if current_name constant_name streq do
      True return
    endif
    index 1 + index = // index++
  done

  // Return False if the Constant was not found
  False
end

// Check if a Function with a certain name exists
// Params: function_name, List[Functions]
// Return: bool
function function_exists str ptr -> bool :
  0
  take
    index
    function_name
    functions
  in

  // Iterate over functions and check if a Function with certain name exists
  while index functions List.len < do

    // Get the current Function
    index functions List.nth ptr.load Function.get_name
    take current_name in

    // Return True if current Function's name matches function_name parameter
    if current_name function_name streq do
      True return
    endif
    index 1 + index = // index++
  done

  // Return False if the Function was not found
  False
end

// Check if a Memory with a certain name exists
// Params: memory_name, List[Memory]
// Return: bool
function memory_exists str ptr -> bool :
  0
  take
    index
    memory_name
    memories
  in

  // Iterate over memories and check if a Memory with certain name exists
  while index memories List.len < do

    // Get the current Memory
    index memories List.nth ptr.load Memory.get_name
    take current_name in

    // Return True if current Memory's name matches memory_name parameter
    if current_name memory_name streq do
      True return
    endif
    index 1 + index = // index++
  done

  // Return False if the Memory was not found
  False
end

// Get Nth command line argument
// Params: index
// Return: *argv[index]
function get_nth_cmd_line_argument int -> str :
  int.size * argv swap ptr+ str.load
end

// Get Constant with certain name from List[Constants]
// Params: name (STR), List[Constant]
// Return: Constant
function get_constant str ptr -> ptr :
  0
  take
    index
    name
    constants
  in

  // Iterate over each Constant
  while index constants List.len < do

    // Get current Constant
    index constants List.nth ptr.load
    take constant in

    // Return current Constant if its name matches the name parameter
    if constant Constant.get_name name streq do
      constant return
    endif
    index 1 + index = // index++
  done
  NULLPTR // Constant was not found
end
