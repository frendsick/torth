// utils.torth - Utility functions for Torth compiler
include "std"
include "argparser"
include "typing"
include "compiler/defs"
include "compiler/error"
include "compiler/class/Location"
include "compiler/class/Signature"
include "compiler/class/Token"
include "compiler/class/TypeNode"
include "compiler/class/Variable"

// Parse command line arguments with Argparser
// Params: None
// Return: Argparser
function parse_command_line_arguments -> Argparser :
  "Torth compiler" Argparser.init
  take parser in
  True  "" "Input file" "code_file"                       parser Argparser.add_argument
  False "FILE" "Output file" "--out"                      parser Argparser.add_argument
  False "" "Run program after compilation" "-r"           parser Argparser.add_argument
  False "" "Save files generated during compilation" "-s" parser Argparser.add_argument
  False "" "Output compilation steps" "-v"                parser Argparser.add_argument
  parser Argparser.parse_args
  parser
end

// Print a message to stdout if -v command line flag is present
// Params
//    message: str
//    args: Argparser
// Return None
function verbose_output message:str args:Argparser :
  if "-v" args Argparser.flag_present do
    f"[{Color.HEADER}VERBOSE{Color.RESET}] {message}\n" eputs
  endif
end

// Execute a certain kind of command
function exec_forked func:fn[str] file:str :
  SYS_fork SYSCALL0

  // Child: Compile the assembly code with NASM
  if dup 0 == do
    file func exec
  // Parent: Wait for child to exit
  elif dup -1 != do
    NULL NULL NULL -1 SYS_wait4 SYSCALL4 drop
  // Report error if forking the process failed
  else
    "[ERROR] Could not fork the process\n"
    "FORK_ERROR" CompilerError
  endif drop
end

// Run executable
// Params: file
// Return: None
function execute_program file:str :
  f"./{file}"
  str.size malloc
  take argv executable in

  executable argv str.store
  NULLPTR argv executable execve drop
end

// Get prettified information for Token
function get_token_info token:Token -> str :
  f"{Color.HEADER}Token{Color.RESET}: {token Token.value}\n"
  token Token.location get_location_info  str.cat
end

// Remove a file
// Params
//    file_name: str
// Return None
function remove_file file_name:str :
  // Allocate memory for the arguments
  List.init take argv in
  "rm"        cast(ptr) argv List.append
  file_name   cast(ptr) argv List.append
  NULLPTR argv List.first "/usr/bin/rm" execve drop
end

function get_location_info location:Location -> str :
  f"{Color.HEADER}File{Color.RESET}: {location Location.file}
{Color.HEADER}Row{Color.RESET}: {location Location.row itoa}
{Color.HEADER}Column{Color.RESET}: {location Location.column itoa}\n"
end

// Get the output file name from command line arguments
// Params
//    input_file: str
//    args: Argparser
// Return
//    file_name: str
function get_output_file_name input_file:str args:Argparser -> str :
  "--out" args Argparser.get_argument
  take file_name in

  if file_name cast(int) NULL == do
    ".torth" input_file str.removesuffix return
  endif
  file_name
end

// Get Op from Location found in a Program
// Params: Location, Program
// Return: Op
function get_op_from_location location:Location program:Program -> Op :
  location cast(int) // Cast Location pointer to int
  program cast(List) List.len
  0
  take
    index
    program.len
    location_int
  in

  while index program.len < do
    index program cast(List) List.nth Op.load
    take op in

    // Test if the current Op has the same Location pointer
    op Op.token Token.location cast(int)
    take current_location in
    if location_int current_location == do
      op return
    endif
    index 1 + index =
  done

  "Operation could not be found from location:\n"
  location Location.repr str.cat
  "OP_NOT_FOUND" CompilerError
  NULL cast(Op)
end

// Get the 0-based index of a variable from a Variable List
// Return -1 if the variable is not found
function get_variable_index variable_name:str variables:List[Variable] -> int :
  variables cast(List) List.len
  0
  take index variables.len in
  while index variables.len < do
    index variables cast(List) List.nth Variable.load Variable.name
    take current_variable in
    if variable_name current_variable streq do
      index return
    endif
    index 1 + index =
  done
  -1 // Not found
end

// Check if a Constant with a certain name exists
// Params: constant_name, List[Constant]
// Return: bool
function constant_exists constant_name:str constants:List[Constant] -> bool :
  // Iterate over constants and check if a Constant with certain name exists
  0 take index in
  while index constants cast(List) List.len < do

    // Get the current Constant
    index constants cast(List) List.nth Constant.load Constant.name
    take current_name in

    // Return True if current Constant's name matches constant_name parameter
    if current_name constant_name streq do
      True return
    endif
    index 1 + index = // index++
  done

  // Return False if the Constant was not found
  False
end

// Check if a Func with a certain name exists
// Params: function_name, List[Func]
// Return: bool
function function_exists str List[Func] -> bool :
  // Func does not exist if get_function_by_name returns NULLPTR
  get_function_by_name cast(int)
  NULL !=
end

// Two TokenTypes are matching if they are equal
// or if either of them is TokenType.ANY
// Params
//    type1: TokenType
//    type2: TokenType
// Return bool
function matching_token_types type1:str type2:str -> bool :
  type1 type2 streq
  type1 "any" streq ||
  type2 "any" streq ||
end

// Get a Func with certain name from a list of Funcs
// Params: function_name, List[Funcs]
// Return: Func
function get_function_by_name function_name:str functions:List[Func] -> Func :
  // Iterate over functions and check if a Func with certain name exists
  0 take index in
  while index functions cast(List) List.len < do

    // Get the current Func
    index functions cast(List) List.nth Func.load
    take func in

    // Return True if current Func's name matches function_name parameter
    if func Func.name function_name streq do
      func return
    endif
    index 1 + index = // index++
  done

  // Return NULL if the Func was not found
  NULL cast(Func)
end

// Get Nth command line argument
// Params: index
// Return: *argv[index]
function get_nth_cmd_line_argument int -> str :
  int.size * argv swap ptr+ str.load
end

// Get Constant with certain name from List[Constants]
// Params: name (STR), List[Constant]
// Return: Constant
function get_constant name:str constants:List[Constant] -> Constant :
  // Iterate over each Constant
  0 take index in
  while index constants cast(List) List.len < do

    // Get current Constant
    index constants cast(List) List.nth Constant.load
    take constant in

    // Return current Constant if its name matches the name parameter
    if constant Constant.name name streq do
      constant return
    endif
    index 1 + index = // index++
  done
  NULL cast(Constant) // Constant was not found
end

// Perform a deep copy of the TypeStack
// Params
//    type_stack: LinkedList[TypeNode]
// Return
//    type_stack_copy: LinkedList[TypeNode]
function TypeStack.copy type_stack:Node -> Node :
  type_stack cast(ptr) Node.load
  LinkedList.init
  0
  take
    stack_depth
    type_stack_copy
    node
  in

  // Empty TypeStack
  if type_stack LinkedList.len 0 == do
    type_stack_copy return
  endif

  // Traverse the TypeStack to the first Node
  while node Node.next cast(int) NULL != do
    node Node.next node =
    stack_depth 1 + stack_depth =
  done

  // Fill the copy TypeStack with the contents of the original
  while stack_depth 0 >= do
    // Generate new TypeNode from the original stack
    node Node.data cast(TypeNode)
    take type_node in
    type_node TypeNode.location
    type_node TypeNode.type
    TypeNode.init cast(ptr)
    type_stack_copy LinkedList.push

    // Get the next item in the stack
    node Node.prev node =
    stack_depth 1 - stack_depth =
  done
  type_stack_copy
end

// Get a List of TokenTypes from TypeStack
// Params
//    type_stack: LinkedList[TypeNode]
// Return
//    token_types: List[TokenType]
function TypeStack.get_types type_stack:Node -> List :
  type_stack cast(ptr) Node.load
  List.init
  0
  take
    stack_depth
    token_types
    node
  in

  // Handle the empty case
  if type_stack LinkedList.len 0 == do
    token_types return
  endif

  // Traverse the TypeStack to the first Node
  while node Node.next cast(int) NULL != do
    node Node.next node =
    stack_depth 1 + stack_depth =
  done

  // Fill List with the TokenTypes inside TypeStack
  while stack_depth 0 >= do
    node Node.data cast(TypeNode)
    TypeNode.type cast(ptr) token_types List.append
    stack_depth 1 - stack_depth =
  done
  token_types
end

// Get a string representation of a TypeStack
// Params
//    type_stack: LinkedList[TypeNode]
// Return
//    stack_repr: str
function TypeStack.repr type_stack:Node -> str :
  type_stack TypeStack.copy
  "" str.copy
  take stack_repr type_stack in

  // Check for empty LinkedList
  if type_stack LinkedList.is_empty do
    "[EMPTY]\n" str.copy return
  endif

  type_stack LinkedList.pop cast(TypeNode)
  1
  take index node in
  while node cast(int) -1 != do
    f"[{index itoa}] {node TypeNode.type} ({node TypeNode.location Location.repr})\n"
    stack_repr swap str.cat
    stack_repr =

    // Pop the next item from TypeStack
    type_stack LinkedList.pop cast(TypeNode) node =
    index 1 + index =
  done
  stack_repr
end

// Get the string representation of the OpType
// Params: OpType
// Return: str(OpType)
function OpType.repr int -> str :
  // Assert that every OpType has been taken into account
  if OpType.len 28 != do
    "All OpTypes are not taken into account in `OpType.repr` method.\n"
    "ASSERTION_ERROR" CompilerError
  endif

  // Return the string representation of a certain OpType
  take op_type in
  if op_type OpType.ASSIGN_BIND == do
    "ASSIGN_BIND" return
  elif op_type OpType.BREAK == do
    "BREAK" return
  elif op_type OpType.CAST == do
    "CAST" return
  elif op_type OpType.CONTINUE == do
    "CONTINUE" return
  elif op_type OpType.DO == do
    "DO" return
  elif op_type OpType.DONE == do
    "DONE" return
  elif op_type OpType.ELIF == do
    "ELIF" return
  elif op_type OpType.ELSE == do
    "ELSE" return
  elif op_type OpType.END == do
    "END" return
  elif op_type OpType.ENDIF == do
    "ENDIF" return
  elif op_type OpType.FUNCTION_CALL == do
    "FUNCTION_CALL" return
  elif op_type OpType.FUNCTION_RETURN == do
    "FUNCTION_RETURN" return
  elif op_type OpType.IF == do
    "IF" return
  elif op_type OpType.IN == do
    "IN" return
  elif op_type OpType.INTRINSIC == do
    "INTRINSIC" return
  elif op_type OpType.PEEK == do
    "PEEK" return
  elif op_type OpType.PEEK_BIND == do
    "PEEK_BIND" return
  elif op_type OpType.POP_BIND == do
    "POP_BIND" return
  elif op_type OpType.PUSH_BIND == do
    "PUSH_BIND" return
  elif op_type OpType.PUSH_BOOL == do
    "PUSH_BOOL" return
  elif op_type OpType.PUSH_CHAR == do
    "PUSH_CHAR" return
  elif op_type OpType.PUSH_FN == do
    "PUSH_FN" return
  elif op_type OpType.PUSH_INT == do
    "PUSH_INT" return
  elif op_type OpType.PUSH_STR == do
    "PUSH_STR" return
  elif op_type OpType.RETURN == do
    "RETURN" return
  elif op_type OpType.TAKE == do
    "TAKE" return
  elif op_type OpType.TYPEOF == do
    "TYPEOF" return
  elif op_type OpType.WHILE == do
    "WHILE" return
  endif

  // Report error if the given OpType was not handled
  f"OpType {op_type itoa} is not taken into account in OpType.repr method"
  "ASSERTION_ERROR" CompilerError ""
end

// Get Variable with certain name from Array
// Return NULL if not found
// Params: Array[Variable], str
// Return: Variable
function Array.get_variable Array[Variable] str -> Variable :
  cast(Array) dup Array.len
  0
  take
    index
    len
    array
    name
  in

  while index len < do
    index array Array.nth Variable.load
    take variable in

    // Return True if the current string matches with the parameter
    if variable Variable.name name streq do
      variable return
    endif
    index 1 + index =
  done
  NULL cast(Variable) // Variable was not found
end

// Test if Array contains Variable with certain name
// Params: Array[Variable], str
// Return: bool
function Array.contains_variable Array[Variable] str -> bool :
  Array.get_variable cast(int) NULL !=
end

// Get Variable with certain name from List
// Return NULLPTR if not found
// Params: List[Variable], str
// Return: Variable
function List.get_variable List[Variable] str -> Variable :
  cast(List) List.array cast(Array[Variable]) Array.get_variable
end

// Test if List contains Variable with certain name
// Params: List[Variable], str
// Return: bool
function List.contains_variable List[Variable] str -> bool :
  cast(List) List.array cast(Array[Variable]) Array.contains_variable
end
