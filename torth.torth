// torth.torth - Self hosted implementation of the Torth compiler
include "std"
include "argparser"
include "compiler/asm"
include "compiler/compile"
include "compiler/error"
include "compiler/lex"
include "compiler/program"
include "compiler/typecheck"

function main :
  // Get the code file from command line
  parse_command_line_arguments
  take args in

  "code_file" args Argparser.get_argument
  take code_file in

  // Get a list of included files for the program
  "[INFO] Getting included files\n" puts
  code_file get_included_files
  take included_files in

  "[INFO] Parsing Tokens\n" puts
  included_files get_token_matches_from_files
  take token_matches in

  "[INFO] Parsing Constants\n" puts
  token_matches get_constants
  take constants in

  "[INFO] Parsing Memories\n" puts
  constants token_matches get_memories
  take memories in

  "[INFO] Parsing Functions\n" puts
  memories constants token_matches get_functions
  take functions in

  // Get the intermediate representation (Program) of each Function
  "[INFO] Parsing Sub-Programs\n" puts
  memories constants functions get_sub_programs
  take sub_programs in

  // TODO: Type check the application
  sub_programs type_check_application

  // Generate assembly code from the intermediate representation
  "[INFO] Generating Assembly code\n" puts
  args get_output_file_name
  take out_file in
  memories sub_programs out_file ".asm" str.cat generate_assembly_file

  // Compile the assembly code file to a Linux x86_64 executable
  "[INFO] Compiling Assembly code\n" puts
  out_file compile_executable

  // Run the program if -r command line flag is present
  if "-r" args Argparser.flag_present do
    "[INFO] Running the program\n" puts
    out_file run_program
  endif
end
