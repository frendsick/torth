// torth.torth - Self hosted implementation of the Torth compiler
include "std"
include "compiler/asm"
include "compiler/error"
include "compiler/class/Program"

function generate_program_from_file str -> ptr :
  "" str.copy           // String buffer for word
  swap read_file        // File contents
  OP_CAPACITY list.init // Program => List[Op]
  take program file_contents word in

  0 while
    file_contents over str.char_at
    peek current_char in
    NULL !=
  do
    if current_char ' ' == do
      word program Program.append_match
      word str.empty
    else
      current_char word str.append
    endif
    1 +
  done drop word program Program.append_match
  program
end

// Append to execve_argv
// Params: Index, argument
// Return: None
function execve_argv.insert int str :
  execve_argv swap ptr.size * ptr+ str.store
end

// Compile Assembly file to object file with NASM
// Params: file_name
// Return: None
function compile_asm str :
  "nasm" exec_forked
end

function link_object_file str :
  "ld" exec_forked
end

memory execve_argv ptr.size end
function compile_with_nasm str :
  "[INFO] Compiling " puts dup puts " with NASM\n" puts
  // nasm -felf64 target_file
  // execve("/usr/bin/nasm", ["nasm", "-felf64", "test.asm"], envp)
  "nasm" execve_argv str.store
  "-felf64" 1 execve_argv.insert
            2 execve_argv.insert
  envp execve_argv "/usr/bin/nasm" execve drop
end

function link_with_ld str :
  "[INFO] Linking " puts dup puts " with LD\n" puts
  // ld -otest.bin test.o
  // execve("/usr/bin/ld", ["ld", "-otest.bin", "test.o"], envp)
  "ld" execve_argv str.store
  "-otest.bin"  1 execve_argv.insert
                2 execve_argv.insert
  envp execve_argv "/usr/bin/ld" execve drop
end

// Handle a command
// Params: command, target_file
// Return: None
function handle_command str str :
  take command target_file in
  if command "nasm" streq do
    target_file compile_with_nasm
  elif command "ld" streq do
    target_file link_with_ld
  else
    "[ERROR] Command '" eputs
    command             eputs
    "' is not known.\n" eputs
    1 exit
  endif
end

// Execute a command while being forked
// Params: command, target_file
// Return: None
function exec_forked str str :
  SYS_fork SYSCALL0
  take fork_return in

  if fork_return 0 == do
    handle_command return
  elif fork_return -1 != do
    // Wait for the forked process
    NULL NULL NULL -1 SYS_wait4 SYSCALL4 drop
  else
    "[ERROR] Error occured while calling SYS_fork.\nExit code: " eputs
    fork_return eputi "\n" eputs
    1 exit
  endif drop drop
end

function main :
  "test.torth" generate_program_from_file
  dup Program.print drop  // Print the Program contents

  // Generate Assembly from the Program
  // generate_asm

  // Write assembly to a file
  // mode_644 "test.asm" write_file drop

  // "test.asm" compile_asm
  // "test.o"   link_object_file
  "TODO: Implement Torth compiler with itself.\n" NotImplementedError
end
