// torth.torth - Self hosted implementation of the Torth compiler
include "std"
include "argparser"
include "compiler/asm"
include "compiler/compile"
include "compiler/error"
include "compiler/lex"
include "compiler/program"
include "compiler/typecheck"
include "compiler/utils"

function main :
  // Parse command line arguments
  parse_command_line_arguments
  take args in

  // Get the code file name from command line
  "code_file" args Argparser.get_argument
  take code_file in

  // Get a list of included files for the program
  args "Getting included files" verbose_output
  code_file get_included_files
  take included_files in

  // Parse diffent code components
  args "Parsing code from " code_file str.cat verbose_output
  included_files get_tokens_from_files
  take tokens in

  // Parse Constants
  tokens get_constants
  take constants in

  // Parse Functions
  constants tokens get_functions
  take functions in

  // Parse classes
  constants functions tokens parse_classes

  // Get the intermediate representation (Program) of each Function
  constants functions get_sub_programs
  take sub_programs in

  // Type check the Program
  args "Type checking the program" verbose_output
  functions sub_programs type_check_application

  // Generate assembly code from the intermediate representation
  args "Generating Assembly code" verbose_output
  args code_file get_output_file_name
  take out_file in
  sub_programs out_file ".asm" str.cat generate_assembly_file

  // Compile the assembly code file to a Linux x86_64 executable
  args "Compiling Assembly code" verbose_output
  out_file compile_executable

  // Remove files generated during compilation
  // if -s command line flag is not present
  if "-s" args Argparser.flag_present not do
    args "Removing files generated during compilation" verbose_output
    out_file remove_compilation_files
  endif

  // Run the program if -r command line flag is present
  if "-r" args Argparser.flag_present do
    args "Running the program" verbose_output
    out_file run_program
  endif
end
