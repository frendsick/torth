include "std"
include "json"
include "typing"

const JSONRPC_VERSION "2.0" end
const SERVER_NAME "torth_ls" end
const SERVER_VERSION "0.0.1" end

// Errors
const ERROR_METHOD_NOT_FOUND -32603 end

// State object for current LSP client
class State
    is_shutdown_requested:bool

    method init -> State :
        State.size malloc cast(State)
        take state in

        false state State->is_shutdown_requested
        state
    end
endclass

function handle_request request:str state:State :
    // Parse Content-Length
    request "Content-Length: " str.len str+
    parse_number_from_beginning
    take content_length in

    // Parse request body
    request "\r\n\r\n" request str.find str+ 4 str+
    str.copy peek request_body in

    // Parse the body as JSON
    parse_json take body_json in

    // Expect object
    if body_json JsonValue.type "object" streq not do
        "Not object" eputs
        1 exit
    endif

    // Parse content part
    // https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#contentPart
    body_json JsonValue.value cast(HashMap)
    take body_object in
    "jsonrpc" body_object HashMap.get str.load
    // Remove backslashes (escape character) from method
    "" "\" "method" body_object HashMap.get str.load str.replace
    take _method jsonrpc in

    // Assert `jsonrpc` version
    if jsonrpc JSONRPC_VERSION streq not do
        f"Expected jsonrpc version {JSONRPC_VERSION} but got {jsonrpc}" eputs
        1 exit
    endif

    // Handle notifications
    if "id" body_object HashMap.get NULL == do
        state _method handle_notification
        return
    endif

    // Handle different methods
    if _method "initialize" streq do
        body_object generate_initialize_response puts
    elif _method "shutdown" streq do
        true state State->is_shutdown_requested
        body_object generate_shutdown_response puts
    elif _method "textDocument/hover" streq do
        body_object generate_hover_response puts
    else
        f"Method '{_method}' is not implemented" dup eputs
        ERROR_METHOD_NOT_FOUND generate_error_request
        JsonValue.repr puts
    endif
end

// Handle some notifications and ignore the rest
function handle_notification _method:str state:State :
    // `exit`: Asks the server to exit its process
    if _method "exit" streq do
        if state State.is_shutdown_requested do
            0 exit
        else
            1 exit
        endif
    endif
end

function generate_shutdown_response body:HashMap -> str :
    body initialize_response_message take response_message in

    // Generate shutdown request
    // https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#shutdown
    "null" "null" JsonValue.init "result" response_message JsonValue.value HashMap.set

    // Generate response
    response_message JsonValue.repr generate_response
end

function generate_hover_response body:HashMap -> str :
    body initialize_response_message take response_message in

    // Generate hover response
    // https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#markupContent
    HashMap.init take hover in
    HashMap.init take markdown_content in
    "string" "markdown" JsonValue.init "kind" markdown_content HashMap.set
    // TODO: Parse relevant value based on the code base
    "string" "Hover content" JsonValue.init "value" markdown_content HashMap.set
    "object" markdown_content JsonValue.init "contents" hover HashMap.set

    // Generate response
    "object" hover JsonValue.init "result" response_message JsonValue.value HashMap.set
    response_message JsonValue.repr generate_response
end

function generate_error_request code:int message:str -> JsonValue :
    HashMap.init take response in

    "number" code JsonValue.init "code" response HashMap.set
    "string" message JsonValue.init "message" response HashMap.set

    "object" response JsonValue.init
end

function get_server_info -> JsonValue :
    HashMap.init take server_info in

    "string" SERVER_NAME JsonValue.init "name" server_info HashMap.set
    "string" SERVER_VERSION JsonValue.init "version" server_info HashMap.set

    "object" server_info JsonValue.init
end

function get_server_capabilities -> JsonValue :
    HashMap.init take capabilities in

    // List capabilities
    "boolean" true JsonValue.init "hoverProvider" capabilities HashMap.set

    "object" capabilities JsonValue.init
end

function generate_response response_body:str -> str :
    f"Content-Length: {response_body str.len itoa}\r\n\r\n{response_body}"
end

function initialize_response_message body:HashMap -> JsonValue :
    "id" body HashMap.get int.load
    HashMap.init
    take response_message id in

    "string" JSONRPC_VERSION JsonValue.init "jsonrpc" response_message HashMap.set
    "number" id JsonValue.init "id" response_message HashMap.set

    "object" response_message JsonValue.init
end

function generate_initialize_response body:HashMap -> str :
    body initialize_response_message take response_message in

    // Generate `InitializeResult`
    // https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#initializeResult
    HashMap.init take initialize_result in
    get_server_capabilities "capabilities" initialize_result HashMap.set
    get_server_info "serverInfo" initialize_result HashMap.set
    "object" initialize_result JsonValue.init "result" response_message JsonValue.value HashMap.set

    // Generate response
    response_message JsonValue.repr generate_response
end

function parse_number_from_beginning input:str -> int :
    input str.len
    "" str.copy
    0
    take index parsed_number input.len in

    while index input.len < do
        if
            index input str.char_at
            peek current_character in
            char.is_numeric not
        do
            break
        endif
        current_character parsed_number str.append parsed_number =
        index 1 + index =
    done

    // The input string did not begin with number
    if parsed_number str.len 0 == do
        -1 return
    endif

    parsed_number atoi
end

function main :
    State.init take state in
    while True do
        state input handle_request
    done
end
