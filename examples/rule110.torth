include "std"
const RULES_COUNT 8 end
const BOARD_SIZE 40 end

function rules -> ptr :
  RULES_COUNT malloc
  take rules in

  0 rules        store_byte  // table[0] == 0  // 111
  1 rules 1 ptr+ store_byte  // table[1] == 1  // 110
  1 rules 2 ptr+ store_byte  // table[2] == 1  // 101
  0 rules 3 ptr+ store_byte  // table[3] == 0  // 100
  1 rules 4 ptr+ store_byte  // table[4] == 1  // 011
  1 rules 5 ptr+ store_byte  // table[5] == 1  // 010
  1 rules 6 ptr+ store_byte  // table[6] == 1  // 001
  0 rules 7 ptr+ store_byte  // table[7] == 0  // 000
  rules
end

function print_board board:ptr :
  0 take index in
  while index BOARD_SIZE < do
    if board index ptr+ load_byte 1 == do
      "*" puts
    else
      " " puts
    endif
    index 1 + index =
  done
  "\n" puts
end

function get_pattern board:ptr index:int -> ptr :
  3 malloc
  take pattern in

  board index 1 - ptr+ load_byte pattern        store_byte  // pattern[0] = previous_board[index-1]
  board index     ptr+ load_byte pattern 1 ptr+ store_byte  // pattern[1] = previous_board[index]
  board index 1 + ptr+ load_byte pattern 2 ptr+ store_byte  // pattern[2] = previous_board[index+1]
  pattern
end

function set_board_index board:ptr board_index:int rule_index:int :
  rules rule_index ptr+ load_byte
  board board_index ptr+ store_byte
end

// Sets the current_board index according to rules
function update_board_index board:ptr board_index:int pattern:ptr :
  // Save the integer from pattern Memory
  pattern int.load
  take int.pattern in

  // Set the board index according to the certain pattern and return
  if   int.pattern 0x10101 == do // 111
    0 board_index board set_board_index return
  elif int.pattern 0x10100 == do // 110
    1 board_index board set_board_index return
  elif int.pattern 0x10001 == do // 101
    2 board_index board set_board_index return
  elif int.pattern 0x10000 == do // 100
    3 board_index board set_board_index return
  elif int.pattern 0x00101 == do // 011
    4 board_index board set_board_index return
  elif int.pattern 0x00100 == do // 010
    5 board_index board set_board_index return
  elif int.pattern 0x00001 == do // 001
    6 board_index board set_board_index return
  elif int.pattern 0x00000 == do // 000
    7 board_index board set_board_index return
  endif
  "Unknown pattern " puts int.pattern putu "\n" puts
end

function calculate_next_iteration current_board:ptr previous_board:ptr :
  // j = 1; while(j < BOARD_SIZE - 1)
  1 take index in
  while index BOARD_SIZE < do
    index previous_board get_pattern
    index current_board update_board_index
    index 1 + index =
  done
end

function main :
  BOARD_SIZE malloc
  BOARD_SIZE malloc
  take current_board previous_board in

  // Set the second index as an initial state for the board
  1 current_board 2 ptr+ store_byte // board[2] = 1

  0 take index in
  while index BOARD_SIZE 2 - < do
    // Sync current board with the previous_board
    BOARD_SIZE current_board previous_board memcpy

    // Print the current board
    current_board print_board

    // Calculate next iteration for the board
    previous_board current_board calculate_next_iteration
    index 1 + index =
  done
end
