// Problem 7: 10001st prime
include "std"
const   PRIME_LIMIT     10001   end
const   UPPER_BOUNDARY  114320  end

// Params: prime, max_prime
// Return: None
function mark_multiples_to_sieve sieve:ptr prime:int max_prime:int :
  prime
  prime prime *
  take curr orig in

  while curr max_prime < do
    // sieve[i] = True
    sieve curr ptr+ True swap store_byte
    curr orig + curr =  // curr += orig
  done
end

function get_nth_prime prime_limit:int -> int :
  if    prime_limit 1 <= do 0 return
  elif  prime_limit 3 <= do prime_limit 1 - return
  endif

  2 // prime_count: Primes 2 and 3 are already taken into account
  5 // index
  UPPER_BOUNDARY malloc
  take
    sieve
    index
    prime_count
  in

  while index UPPER_BOUNDARY < do
    // If current number is prime add it to prime_sum
    if sieve index ptr+ load_byte NULL == do
      prime_count 1 + prime_count = // prime_count += 1

      // Return if prime_count == prime_limit
      if prime_count prime_limit == do index return endif

      // Mark all multiples of index to sieve
      UPPER_BOUNDARY index sieve mark_multiples_to_sieve
    endif

    // All primes except for 2 and 3 are 6nÂ±1
    if    index 6 % 1 ==
    do    index 4 + index =
    else  index 2 + index =
    endif
  done
  // The loop above should have returned early if Nth prime was found.
  "Could not get prime number " eputs prime_limit eputu ".\n" eputs
  "The UPPER_BOUNDARY constant could be too small.\n" eputs
  1 exit NULL
end

function main :
  PRIME_LIMIT get_nth_prime // Answer: 104743
  PRIME_LIMIT putu ". prime is: " puts putu "\n" puts
end
