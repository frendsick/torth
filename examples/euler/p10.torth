// Problem 10: Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.
include "std"
const   MAX_PRIME 2000000   end

// Params: prime, max_prime
// Return: None
function mark_multiples_to_sieve sieve:ptr prime:int max_prime:int :
  prime
  prime prime *
  take curr orig in

  while curr max_prime < do
    // sieve[i] = True
    sieve curr ptr+ True swap store_byte
    curr orig + curr =  // curr += orig
  done
end

// Params: max_prime
// Return: prime_sum
function summation_of_primes max_prime:int -> int :
  2 3 +
  dup
  max_prime malloc

  take
    sieve
    index
    prime_sum
  in

  while index max_prime < do
    // If current number is prime add it to prime_sum
    if sieve index ptr+ load_byte NULL == do
      prime_sum index + prime_sum = // prime_sum += index
      max_prime index sieve mark_multiples_to_sieve
    endif

    // All primes except for 2 and 3 are 6nÂ±1
    if index 6 % 1 == do
      index 4 + index =
    else
      index 2 + index =
    endif
  done
  prime_sum
end

function main :
  MAX_PRIME summation_of_primes itoa
  MAX_PRIME itoa
  take max_prime sum_of_primes in

  // sum_of_primes == 142913828922
  f"The sum of primes below {max_prime}: {sum_of_primes}\n" puts
end
