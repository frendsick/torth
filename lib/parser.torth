include "std"

class Parser
    input:str
    input_len:int
    cursor:int

    method init input:str -> Parser :
        Parser.size malloc cast(Parser)
        take parser in

        input           parser Parser->input
        input str.len   parser Parser->input_len
        0               parser Parser->cursor
        parser
    end

    // Is the cursor is greater than the input_len, parsing is complete
    method is_complete self:Parser -> bool :
        self Parser.cursor self Parser.input_len >=
    end

    // Get the remaining string from cursor
    method get_unparsed self:Parser -> str :
        self Parser.input self Parser.cursor str+
    end

    // Save new value to cursor if possible
    method save_cursor self:Parser cursor:int -> bool :
        // Invalid value for cursor
        if
            cursor self Parser.input_len >=
            cursor 0 <
            ||
        do
            False return
        endif

        // Save the new cursor value
        cursor self Parser->cursor
        True
    end

    // Parse a character if it matches
    method parse_character self:Parser character:char -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        // The character at cursor does not match
        if self Parser.get_unparsed cast(ptr) char.load character != do
            "" return
        endif

        // Parse over the matching character
        self Parser.cursor 1 + self Parser->cursor
        character char.to_string
    end

    method parse_string self:Parser string:str -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        // The string at cursor does not match
        if self Parser.get_unparsed string str.startswith not do
            "" return
        endif

        // Parse over the matching string
        self Parser.cursor string str.len + self Parser->cursor
        string
    end

    // Parse whitespace characters
    method parse_whitespace self:Parser -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        // Parse whitespace characters
        "" str.copy take parsed in
        while
            self Parser.get_unparsed cast(ptr) char.load
            peek current_char in
            char.is_whitespace
        do
            current_char parsed str.append parsed =
            self Parser.cursor 1 + self Parser->cursor
        done

        parsed
    end

    method parse_predicate self:Parser predicate:fn[Parser -> str] -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        self predicate exec
    end

    // Parse characters until predicate function matches
    method parse_until self:Parser predicate:fn[Parser -> str] -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        // Parse characters until predicate function matches
        self Parser.cursor
        "" str.copy
        take parsed original_cursor in
        while self predicate exec str.len 0 == do
            // Predicate function never matched
            if self Parser.is_complete do
                original_cursor self Parser->cursor
                "" return
            endif

            self Parser.get_unparsed cast(ptr) char.load
            parsed str.append parsed =
            self Parser.cursor 1 + self Parser->cursor
        done

        parsed
    end

    // Parse characters while predicate function matches
    method parse_while self:Parser predicate:fn[Parser -> str] -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" return
        endif

        // Parse characters while predicate function matches
        "" str.copy
        take parsed in
        while
            self predicate exec
            peek predicate_parsed in
            str.len 0 >
        do
            // Parsing is complete
            if self Parser.is_complete do
                break
            endif

            parsed predicate_parsed str.cat parsed =
            self Parser.cursor predicate_parsed str.len + self Parser->cursor
        done

        parsed
    end
endclass
