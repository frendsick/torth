include "std"

class Parser
    input:str

    method init input:str -> Parser :
        Parser.size malloc cast(Parser)
        input over Parser->input
    end

    method is_complete self:Parser -> bool :
        self Parser.input str.len 0 ==
    end

    method parse_character self:Parser character:char -> char bool :
        // Parsing is complete
        if self Parser.is_complete do
            NULL cast(char) False return
        endif

        // The first character does not match
        if 0 self Parser.input peek original_input in str.char_at character != do
            NULL cast(char) False return
        endif

        // Parse over the first character
        original_input str.len 1 original_input str.slice self Parser->input
        character True
    end

    method parse_string self:Parser string:str -> str bool :
        // Parsing is complete
        if self Parser.is_complete do
            "" False return
        endif

        // The string at cursor does not match
        if self Parser.input string str.startswith not do
            "" False return
        endif

        // Parse over the matching string
        self Parser.input str.len string str.len self Parser.input str.slice
        self Parser->input
        string True
    end

    // Parse one whitespace character
    method parse_whitespace self:Parser -> str bool :
        if
            0 self Parser.input str.char_at
            peek character in
            char.is_whitespace
        do
            1 self Parser.take_n drop drop
            character char.to_string True return
        endif

        NULL cast(str) False
    end

    // Parse zero or more whitespace characters
    method parse_whitespaces self:Parser -> str :
        Parser.parse_whitespace& self Parser.parse_while
    end

    // Parse one number character
    method parse_number self:Parser -> str bool :
        if
            0 self Parser.input str.char_at
            peek character in
            char.is_numeric
        do
            1 self Parser.take_n drop drop
            character char.to_string True return
        endif

        NULL cast(str) False
    end

    method parse_numbers self:Parser -> str :
        Parser.parse_number& self Parser.parse_while
    end

    method parse_predicate self:Parser predicate:fn[Parser -> str bool] -> str bool :
        // Parsing is complete
        if self Parser.is_complete do
            "" False return
        endif

        self predicate exec
    end

    // Parse while predicate function matches
    method parse_while self:Parser predicate:fn[Parser -> str bool] -> str :
        // Parsing is complete
        if self Parser.is_complete do
            "" True return
        endif

        // Parse while predicate function matches
        "" str.copy
        take parsed in
        while
            self predicate exec
            take matched predicate_parsed in
            matched
        do
            // Append parsed string from predicate function
            parsed predicate_parsed str.cat parsed =

            // Parsing is complete
            if self Parser.is_complete do
                break
            endif
        done

        parsed
    end

    // Parse character by character until the predicate function matches
    method parse_until self:Parser predicate:fn[Parser -> str bool] -> str bool :
        // Parsing is complete
        if self Parser.is_complete do
            "" False return
        endif

        // Parse characters until predicate function matches
        self Parser.input str.copy
        "" str.copy
        take parsed original_input in
        while
            self predicate exec
            take matched predicate_parsed in
            matched not
        do
            // Predicate function never matched
            if self Parser.is_complete do
                original_input self Parser->input
                "" False return
            endif

            // Append the current character to the parsed string
            parsed 1 self Parser.take_n drop str.cat
            parsed =
        done

        // Return the parsed string to Parser.input
        predicate_parsed self Parser.input str.cat self Parser->input

        parsed True
    end

    method take_n self:Parser N:int -> str bool :
        // Cannot take N characters if N > Parser.input
        if N self Parser.input peek old_input in str.len > do
            "" False return
        endif

        // Parse over N characters
        old_input str.len N old_input str.copy str.slice
        self Parser->input

        // Return the parsed string
        N 0 old_input str.slice
        True
    end
endclass
