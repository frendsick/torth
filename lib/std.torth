// std.torth - Standard library for Torth
// A collection of common functions

// Include libraries
include "errno"
include "math"
include "sys"
include "typing"

// Common constants
const NULL 0 end

// Memory
const MEMORY_CAPACITY 430080 end  // 420 * 1024 => 420kb

// Data types
const bool.size   1 end
const char.size   1 end
const int.size    8 end
const ptr.size    8 end
const str.size    8 end

// File descriptors
const stdin  0 end
const stdout 1 end
const stderr 2 end

// Usual file modes
const mode_777 0x1ff end
const mode_755 0x1ed end
const mode_750 0x1e8 end
const mode_700 0x1c0 end
const mode_644 0x1a4 end
const mode_640 0x1a0 end
const mode_600 0x180 end

// Extra intrinsics
function NULLPTR            -> ptr  : NULL cast(ptr)    end
function ^        int int   -> int  : pow               end
function not      bool      -> bool : True !=           end
function |        int int   -> int  : or                end
function ||       bool bool -> bool : or cast(bool)     end
function &&       bool bool -> bool : and cast(bool)    end

// Get user input from stdin
function input -> str :
  // Allocate memory for the user input
  MEMORY_CAPACITY malloc
  MEMORY_CAPACITY over cast(str) stdin read // Returns the amount of bytes read

  // Remove the newline character from the end
  over swap 1 - ptr+ NULL cast(char) swap char.store cast(str)
end

// Write a string to a file descriptor
// Params: int fd, char *buf, size_t count
// Return: ssize_t written_bytes
function write int str int -> int : SYS_write syscall3 end

// Read <count> bytes from a file descriptor
// Params: int fd, char *buf, size_t count
// Return: ssize_t read_bytes
function read int str int -> int : SYS_read syscall3 end

// Execute the command referred to by <pathname>
// Params: const char *pathname, char *const argv[], char *const envp[]
// Return: On success, execve does not return, on error -1 is returned
function execve str ptr ptr -> int : SYS_execve syscall3 end

// Exit from the program with a <status> code
// Params: int status
// Return: None
function exit int : SYS_exit syscall1 drop end

// Print a string to a file descriptor
// Params: int fd, char *buf
// Return: None
function fputs fd:int buf:str : buf str.len buf fd write drop end

// Allocate read-write memory and return the pointer to the allocated memory
// Params: size_t length
// Return: Pointer to the start of the allocated memory
function malloc length:int -> ptr :
  // Allocate at least one byte
  if length 0 <= do
    1 length =
  endif

  // mmap ( NULL, length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, 0, 0 );
  0 0
  MAP_ANONYMOUS MAP_PRIVATE |
  PROT_READ PROT_WRITE |
  length
  NULL SYS_mmap SYSCALL6 cast(ptr)
end

// Deallocate memory
// Params: pointer (PTR), len (INT)
// Return: None
function munmap ptr int :
  SYS_munmap SYSCALL2 drop
end

// Copy N characters from one memory location to another
// Params: dest (PTR), src (PTR), len (INT)
// Return: None
function memcpy dest:ptr src:ptr len:int :
  0 take index in
  while index len < do
    src  index ptr+ char.load
    dest index ptr+ char.store
    index 1 + index =
  done
end

// Print a string to stdout
function puts  str : stdout fputs end

// Print a string to stderr
function eputs str : stderr fputs end

// Print an unsigned integer to stdout
function putu int : itoa puts end

// Print an unsigned integer to stderr
function eputu int : itoa eputs end

// Print a signed integer to stdout
function puti int : itoa puts end

// Print a signed integer to stderr
function eputi int : itoa eputs end

// Ptr functions
function ptr+       int ptr -> ptr : swap cast(int) + cast(ptr) end
function ptr-       int ptr -> ptr : swap cast(int) - cast(ptr) end
function ptr++      ptr     -> ptr : ptr.size ptr+              end
function ptr.load   ptr     -> ptr : LOAD_QWORD cast(ptr)       end
function ptr.store  ptr ptr ->     : STORE_QWORD                end

// Bool functions
function bool.load  ptr       -> bool : LOAD_BYTE cast(bool)    end
function bool.store ptr bool  ->      : STORE_BYTE              end

// Char functions
function char.load  ptr       -> char : LOAD_BYTE cast(char)    end
function char.store ptr char  ->      : STORE_BYTE              end

// Return the lowercase character for the given character
function char.lower char -> char :
  if dup char.is_uppercase do 32 + cast(char) endif
end

// Return the uppercase character for the given character
function char.upper char -> char :
  if dup char.is_lowercase do 32 - cast(char) endif
end

// Test if character is a number
function char.is_numeric char -> bool :
  dup   '0' >=
  swap  '9' <=
  &&
end

// Test if a character is a lowercase letter
function char.is_lowercase char -> bool :
  dup  'a' >=
  swap 'z' <=
  &&
end

// Test if a character is an uppercase letter
function char.is_uppercase char -> bool :
  dup  'A' >=
  swap 'Z' <=
  &&
end

// Test if a character is a letter
function char.is_letter char -> bool :
  dup  char.is_uppercase
  swap char.is_lowercase
  ||
end

// Test if a character is either a letter or a number
function char.is_alphanumeric char -> bool :
  dup  char.is_letter
  swap char.is_numeric
  ||
end

// Test if a character is some whitespace character
function char.is_whitespace c:char -> bool :
  c ' ' ==  // Space
  c 9   ==  // Tab \t
  c 10  ==  // Line feed \n
  c 13  ==  // Carriage return \r
  || || ||  // Logical OR each of the comparisons
end

function char.to_string character:char -> str :
  "" str.copy
  take string in
  character string str.append
end

// Int functions
function int.load     ptr       -> int    : LOAD_QWORD cast(int)  end
function int.store    ptr int   ->        : STORE_QWORD           end

// Get the amount of digits in an integer
// Params: number
// Return: amount_of_digits
// Example: 1234 -> 4
function int.get_digits int -> int :
  // The amount of digits == 1 if the integer is 0
  if dup 0 == do
    drop 1
  else
    0 swap while dup 0 != do
      10 /
      swap 1 + swap
    done drop
  endif
end

// Reverse an integer
// Example: 1234 --> 4321
function int.reverse int -> int :
  0 while over 0 > do
    10 * swap dup 10 % rot +
    swap 10 / swap
  done swap drop
end

// Convert negative integer to positive
function int.to_positive int -> int :
  if dup 0 < do 2 ^ sqrt endif
end

// Get a string representation of an integer
function itoa num:int -> str :
  // Return "0" if parameter is 0
  if num 0 == do
    "0" return
  endif

  // Swap sign of negative number
  num 0 < take is_negative in
  if is_negative do
    num int.to_positive
    num =
  endif

  // Allocate memory to the string representation
  num int.get_digits        // digits
  dup 2 + malloc cast(str)  // string
  10                        // base
  take
    base
    string
    digits
  in

  // Process individual digits: https://www.geeksforgeeks.org/implement-itoa/
  0 while dup digits < do
    num base %  // rem = num/base

    // str[index] = (rem > 9)? (rem-10) + 'a' : rem + '0';
    if dup 9 >
    do    10 - 'a' +
    else  '0' +
    endif cast(char)
    string str.append
    string =

    num base / num =  // num = num/base
    1 +               // index++
  done drop

  // Add '-' character to the end of string for negative number
  // This will be reversed later
  if is_negative do
    '-' string str.append
    string =
  endif

  // Reverse for correct processing
  string str.reverse
end

// Get an integer representation of a string
function atoi string:str -> int :
  NULL
  0
  take index integer in

  // Iterate the string character by character
  while index string str.char_at NULL != do

    // Get current character
    index string str.char_at

    // Raise an error if the character is not a number
    if dup char.is_numeric not do
      "[ERROR] atoi function failed: '"
      string                    str.cat
      "' is not an integer.\n"  str.cat
      eputs 1 exit
    endif

    // Append the current character to integer
    '0' -
    integer 10 * +
    integer =
    index 1 + index = // index++
  done integer
end

// String functions
function str+         int str   -> str  : swap cast(int) + cast(str)    end
function str.load     ptr       -> str  : LOAD_QWORD cast(str)          end
function str.store    ptr str   ->      : STORE_QWORD                   end

// Copy string to a newly allocated memory location and return the copied string
function str.copy str -> str :
  // Allocate memory which can store the string
  dup str.len 1 + malloc
  swap // str
  str.fill
end

// Get the length of a string
// Example: "Test string" -> 11
function str.len string:str -> int :
  0 while dup string str.char_at NULL != do
    1 +
  done
end

// Fill a ptr with the contents of a string
function str.fill string:str pointer:ptr -> str :
  // Loop through every character of the first string
  0 take index in
  while
    index string str.char_at
    peek character in
    NULL !=
  do
    character
    pointer index ptr+ char.store
    index 1 + index =
  done
  pointer cast(str)
end

// Insert a string inside another strings at certain index
// Params: index, str2, str1
// Return: str1[:index] + str2 + str1[index:]
function str.insert_at
  index:int
  str2:str
  str1:str
-> str :
  if index str1 str.len >= do
    "[ERROR] str.index_at function failed: '"
    str1                      str.cat
    "' does not have index "  str.cat
    index itoa                str.cat
    "\n"                      str.cat
    eputs 1 exit
  endif

  // Allocate memory to hold both strings
  str1 str.len
  str2 str.len
  1 + // NULL byte
  + malloc
  take final_str in

  // Split the str2 from the index
  str1 index str+ str.copy
  take str1_end in
  str1 index str+ NULL cast(char) swap cast(ptr) char.store

  final_str str1 str.fill
  str2 str.cat
  str1_end str.cat
end

// Replace escape sequences with the corresponding characters
// Example: "Escape newline\n" => "Escape newline<LF>"
function str.escape string:str -> str :
  9  cast(char) char.to_string
  10 cast(char) char.to_string
  13 cast(char) char.to_string
  27 cast(char) char.to_string
  92 cast(char) char.to_string
  take
    backslash
    Escape
    CR
    LF
    Tab
  in

  // Save escape sequences to variables
  Tab     backslash "t" str.cat string  str.replace_all
  LF      backslash "n" str.cat rot     str.replace_all
  CR      backslash "r" str.cat rot     str.replace_all
  Escape  backslash "e" str.cat rot     str.replace_all
end

// Get the index of the first character of a substring from a string
// Return -1 if substring is not found
// Params: string, substring
// Return: index
function str.find string:str substring:str -> int :
  substring str.len
  string str.len
  0
  take
    index
    string.len
    substring.len
  in

  // Return -1 if substring is longer than the string
  // or the substring is 0 length
  if
    substring.len string.len >
    substring.len 0 <=
    ||
  do
    -1 return
  endif

  while index string.len substring.len - <= do

    // String starting from the index starts with the substring
    if string index str+ substring str.startswith do
      index return
    endif

    index 1 + index =
  done

  // String was not found
  -1
end

// Replace first occurrence of substring with another string.
// Return the original string if substring is not found
// Params: string, substring, replacement
// Return: string
function str.replace
  string:str
  substring:str
  replacement:str
-> str :
  // Get the index of the first substring match
  substring string str.find
  take index in

  // Return the original string if no match was found
  if index 0 < do
    string return
  endif

  // Split the string from the index
  string index str+ cast(ptr) NULL cast(char) swap char.store
  string index substring str.len + str+
  take string_end in

  string
  replacement str.cat
  string_end  str.cat
end

// Replace all occurrences of substring with another string.
// Return the original string if substring is not found.
// Params: string, substring, replacement
// Return: string
function str.replace_all
  string:str
  substring:str
  replacement:str
-> str :
  // Loop as long as string as occurrences of substring
  while True do
    // Save the current string as old_string
    string take old_string in

    // Return if str.replace does not do changes
    replacement substring string str.replace
    take new_string in
    if new_string old_string streq do
      new_string return
    endif

    // Use the new string in the next iteration as old_string
    new_string string =
  done
  new_string
end

// Concatenate two strings into a new memory location
// Params: str2, str1
// Return: concat(str1+str2)
function str.cat str2:str str1:str -> str :
  // Allocate memory to hold both strings
  str1 str.len
  str2 str.len
  1 + // NULL byte
  + malloc

  // Fill the beginning of the allocated memory with str1
  str1 str.fill
  take final_str in

  // Append str2 to final_string
  final_str dup str.len str+ cast(ptr)
  str2 str.fill drop

  // Deallocate `str1` if it is not a static string
  str1 str.delete

  final_str
end

// Deallocate string's memory if it is not a static string
function str.delete string:str :
  if string cast(int) KERNEL_SPACE_PTR < do return endif
  string str.len 1 + string cast(ptr) munmap
end

// Append a character to the end of a string buffer
// Params: string, character
// Return: None
function str.append string:str character:char -> str :
  string str.len 2 + malloc
  take buffer in

  // Copy the string to buffer
  string str.len
  string cast(ptr)
  buffer
  memcpy

  // Add character to the end
  character buffer string str.len ptr+ char.store

  buffer cast(str)
end

// Prepend a character to the start of a string buffer
// Params: string, character
// Return: None
function str.prepend string:str character:char -> str :
  string str.len 2 + malloc
  take buffer in

  // Add character to the beginning
  character buffer char.store

  // Copy rest of the string to the end
  string str.len
  string cast(ptr)
  buffer 1 ptr+
  memcpy

  buffer cast(str)
end

// Get the character at a certain index of a string
// Params: string, index
// Return: character_at_index
function str.char_at str int -> char : swap str+ cast(ptr) char.load end

// Test if a string is a palindrome (reads the same backward or forward)
function str.is_palindrome str -> bool : dup str.reverse streq end

// Test if string only contains numeric characters
function str.is_numeric string:str -> bool :
  // Check for negative numbers
  if string cast(ptr) char.load '-' == do
    string 1 str+ string =
  endif

  // Iterate over every character of the string
  while string cast(ptr) char.load NULL != do
    // Break if non-numeric character is found
    if string cast(ptr) char.load char.is_numeric not do
      break
    endif
    string 1 str+ string = // Point to the next character
  done
  // Return True if the whole string was numeric
  string str.len 0 ==
end

// "Empty" a string by storing NULL byte to the beginning
function str.empty string:str :
  NULL string store_byte
end

// Convert string to lowercase letters
function str.lower string:str -> str :
  string str.len  // len
  0               // index
  take index len in

  // Rewrite string with lowercase characters
  while index len < do
    index string str.char_at char.lower
    string cast(ptr) index ptr+ char.store
    index 1 + index = // index++
  done string
end

// Convert string to uppercase letters
function str.upper string:str -> str :
  string str.len  // len
  0               // index
  take index len in

  // Rewrite string with uppercase characters
  while index len < do
    index string str.char_at char.upper
    string cast(ptr) index ptr+ char.store
    index 1 + index = // index++
  done string
end

// Strip all non-alphanumeric characters from a string
function str.alphanumeric string:str -> str :

  // Allocate enough memory to hold the whole string
  string str.len
  dup malloc cast(str)
  0
  take index buffer string_len in

  while index string_len < do
    index string str.char_at
    take current_char in

    // Append alphanumeric character to the buffer
    if current_char char.is_alphanumeric do
      current_char buffer str.append buffer =
    endif
    index 1 + index =
  done

  buffer
end

// Check if a string starts with another string
// Params: prefix (STR), string (STR)
// Return: True/False
function str.startswith prefix:str string:str -> bool :
  string str.len
  prefix str.len
  0
  take
    index
    prefix.len
    string.len
  in

  // Return False if prefix.len > string.len
  if prefix.len string.len > do
    False return
  endif

  while index prefix.len < do
    if
      index string str.char_at
      index prefix str.char_at
      !=
    do
      False return
    endif
    index 1 + index = // index++
  done
  True
end

// Check if a string ends with another string
// Params: suffix (STR), string (STR)
// Return: True/False
function str.endswith suffix:str string:str -> bool :
  string str.len
  suffix str.len
  0
  take
    index
    suffix.len
    string.len
  in

  // Return False if suffix.len > string.len
  if suffix.len string.len > do
    False return
  endif

  while index suffix.len < do
    if
      string.len index - 1 - string str.char_at
      suffix.len index - 1 - suffix str.char_at
      !=
    do
      False return
    endif
    index 1 + index = // index++
  done
  True
end

// Remove a prefix if it exists. Otherwise return the original string.
// Params: string (STR), prefix (STR)
// Return: None
function str.removeprefix string:str prefix:str -> str :
  if string prefix str.startswith do
    string prefix str.len str+ string =
  endif
  string
end

// Remove a suffix if it exists. Otherwise return the original string.
// Params: string (STR), suffix (STR)
// Return: None
function str.removesuffix string:str suffix:str -> str :
  // Return a new string without the matching suffix
  if string suffix str.endswith do
    string str.copy string =
    string dup str.len suffix str.len - str+ str.empty
  endif
  string
end

// Tests if two strings are equal
function streq str1:str str2:str -> bool :
  str1 str.len
  str2 str.len
  0
  take
    index
    str2.len
    str1.len
  in

  // Different length strings are not equal
  if str1.len str2.len != do
    False return
  endif

  // Iterate over every character of the strings
  while
    index str1.len <
  do
    if
      index str1 str.char_at
      index str2 str.char_at
      !=
    do
      False return
    endif
    index 1 + index =
  done
  True
end

// Reverse a string
function str.reverse original:str -> str :
  // Allocate memory for the reversed string
  original str.len dup malloc cast(str)
  take reversed index in

  // Append characters from the parameter string to allocated memory in the reversed order
  while 0 index < do
    index 1 - index =           // index--
    index original str.char_at  // original[index]

    // Append the current character to the reversed string
    reversed str.append reversed =
  done reversed
end

// https://en.wikibooks.org/wiki/Algorithm_Implementation/Miscellaneous/Base64
function base64.encode string:str -> str :
  string str.len
  dup 3 %
  over 2 * malloc cast(str)
  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" str.copy
  0
  0
  take
    padding_size
    base64_index
    base64_characters
    base64_string
    char_index
    string.len
  in

  // Add a right zero pad to make this string a multiple of 3 characters
  if char_index 0 > do
    char_index while dup 3 < do
      padding_size 1 + padding_size =
      1 +
    done drop
  endif

  // Increment over the length of the string, three characters at a time
  0 char_index = // Zero char_index
  while char_index string.len < do

    // These three 8-bit (ASCII) characters become one 24-bit number
    char_index      string str.char_at 16 shl
    char_index 1 +  string str.char_at 8 shl +
    char_index 2 +  string str.char_at +
    take 24bit_number in

    // This 24-bit number gets separated into four 6-bit numbers
    List.init
    take 6bit_list in
    24bit_number 18 shr 63 and cast(ptr) 6bit_list List.append
    24bit_number 12 shr 63 and cast(ptr) 6bit_list List.append
    24bit_number 6  shr 63 and cast(ptr) 6bit_list List.append
    24bit_number        63 and cast(ptr) 6bit_list List.append

    // Those four 6-bit numbers are used as indices into the base64 character list
    0 while dup 4 < do
      dup 6bit_list List.nth int.load base64_characters str.char_at
      base64_string cast(ptr) base64_index ptr+ char.store
      base64_index 1 + base64_index = // base64_index++
      1 +
    done drop

    char_index 3 + char_index = // char_index += 3
  done

  // Append the padding characters and return the result
  NULL cast(char) base64_string dup str.len padding_size - str+ cast(ptr) char.store
  if    padding_size 1 ==
  do    base64_string "="   str.cat return
  elif  padding_size 2 ==
  do    base64_string "=="  str.cat return
  endif base64_string
end

// Open a file with open-syscall
// Params: int oflag, const char *path
// Return: fd
function open_file oflag:int path:str -> int :
  oflag path SYS_open syscall2
  take fd in
  if fd ENOENT == do
    "File '" eputs path eputs "' does not exist.\n" eputs
    1 exit
  elif fd EACCESS == do
    "Cannot open file '" eputs path eputs "': Permission denied.\n" eputs
    1 exit
  elif fd EFAULT == do
    "The 'path' argument for SYS_open points to inaccessible memory location.\n" eputs
    1 exit
  elif fd 0 < do
    "Error occurred while opening the file '" eputs path eputs "'.\n" eputs
    "Error code: " eputs fd eputi
    1 exit
  endif
  fd
end

// Read a file to a newly allocated memory
// Params: const char *path
// Return: str buffer
function read_file path:str -> str :

  // Open file as fd
  path O_RDONLY open_file

  // Allocate string buffer
  MEMORY_CAPACITY malloc cast(str)
  take buffer fd in

  // Read the file to the string buffer and return it
  MEMORY_CAPACITY buffer fd read 1 + // Include NULL byte
  take read_bytes in

  // Find the size of excess memory to the closest memory page after buf
  // => Memory page size is 4KB
  4096 take PAGE_SIZE in

  // Get the byte offset from the end of buffer to the next memory page
  PAGE_SIZE read_bytes PAGE_SIZE % -
  take offset in

  MEMORY_CAPACITY read_bytes - offset -
  take excessive_bytes in

  excessive_bytes buffer cast(ptr) read_bytes offset + ptr+ munmap

  // Close the file descriptor
  fd SYS_close syscall1 drop

  // Return buffer
  buffer
end

// Create a file
// Params: const char *pathname, mode_t mode
// Return: int fd
function touch_file str int -> int :
  SYS_creat syscall2
end

// Write a string to a file
// Params: const char *filename, mode_t mode, const void *buf
// Return: ssize_t written_bytes
function write_file str int str -> int :
  // Create file
  touch_file

  // Write to the file
  take fd buf in
  buf str.len // size_t count
  buf fd SYS_write syscall3

  // Close the file descriptor
  fd SYS_close syscall1 drop
end

// Params: const char *filename, const void *buf
function append_file str str :
  mode_644
  O_APPEND O_CREAT O_WRONLY | |
  rot SYS_open syscall3

  take fd buf in
  buf str.len // size_t count
  buf fd SYS_write syscall3 drop

  // Close the file descriptor
  fd SYS_close syscall1 drop
end

// Print file contents to stdout
// Params: const char *pathname
// Return: ssize_t written_bytes
function print_file str :
  read_file puts
end

// Test if a file exists
function file_exists str -> bool :
  O_RDONLY swap SYS_open syscall2
  take fd in

  if fd 0 > do
    fd SYS_close syscall1 drop
    True return
  endif
  False
end

// Get Nth command line argument
// Params: index
// Return: *argv[index]
function get_argument int -> str :
  int.size * argv swap ptr+ str.load
end

// Sleep causes the calling thread to sleep either until the
// number of real-time seconds specified in parameters have elapsed or
// until a signal arrives which is not ignored.
// Params: How many seconds to sleep (STR)
// Return: None
// Usage: "4.2" sleep  // Sleep for 4.2 seconds
function sleep str :
  // Allocate memory for two strings
  str.size 2 * malloc take argv in

  // execve("/usr/bin/sleep", ["sleep", "0.01"], envp)
  "sleep" argv str.store
  argv ptr.size ptr+ str.store
  envp argv "/usr/bin/sleep" execve drop
end

// Get the value of certain environment variable
// Return NULL if variable is not found
// Params: evar_key (str)
// Return: evar_value
function getenv evar_key:str -> str :
  // Check environment variables one by one
  0 take index in
  while envp int.load NULL != do
    envp index ptr.size * ptr+ str.load
    take evar_value in

    // Return the environment variable when found
    if evar_value evar_key str.startswith do
      0 while dup evar_value str.char_at '=' != do
        1 +
      done

      // Get the string from the character after '='
      evar_value cast(ptr) swap 1 + ptr+ cast(str)
      return
    endif
    index 1 + index = // index++
  done

  // Return NULLPTR if evar_key was not found
  NULLPTR cast(str)
end
