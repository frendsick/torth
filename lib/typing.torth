// typing.torth - Definitions for non-built in types
include "std"

// Constants
const ITERABLE_CAPACITY 32768 end

// === List ===
// README:
//    Lists are contiguous memory blocks containing list of values.
//    => Value at the list pointer represents the amount of items in the list.
//    => Value after it represents the size of stored objects
//    The first index of the list comes after the length and size values (ptr + 16 bytes).

// Initialize list with a certain size
// Params: None
// Return: list (PTR)
function list.init -> ptr :
  // Allocate memory for the list and the integer
  // representing how many items there are in the list
  ITERABLE_CAPACITY ptr.size * int.size + malloc
end

// Append value pointer to a list
// Params: list (PTR), value_ptr (PTR)
// Return: list (PTR)
function list.append ptr ptr -> ptr :
  dup int.load // Length of list

  // Store values from the stack to variables
  take
    len
    list
    value_ptr
  in

  // Dynamically allocate more memory to the list when at capacity
  if
    len 0 !=
    len ITERABLE_CAPACITY % 0 ==
    &&
  do
    // Allocate memory with size (len + ITERABLE_CAPACITY) * ptr.size + int.size
    len ITERABLE_CAPACITY + ptr.size * int.size + dup malloc
    take new_list memory_size in

    // Copy list to newly allocated list
    memory_size ITERABLE_CAPACITY - list new_list memcpy

    // Deallocate the original list
    memory_size ITERABLE_CAPACITY - list munmap

    // Use the new list instead of the old one
    new_list list =
  endif

  // Add the value_ptr to the end of the list
  value_ptr
  list int.size ptr+
  ptr.size len * ptr+
  ptr.store

  // Increment the list length by one
  len 1 + list int.store
  list
end

// Get the length of a list
// Params: list (PTR)
// Return: len (INT)
function list.len ptr -> int :
  // The length is stored at the list pointer
  int.load
end

// Empty the list by setting the length value to 0
// Params: list (PTR)
// Return: None
function list.empty ptr :
  0 swap int.store
end

// Copy the list to new memory location
function list.copy ptr -> ptr :
  // Initialize variables
  dup list.len ptr.size * int.size +
  list.init
  take
    new_list
    memory_size
    old_list
  in

  // Copy the old memory to the new location
  memory_size old_list new_list memcpy
  new_list
end

// Get pointer to the first element of the list
// Params: list (PTR)
// Return: list[0] (PTR)
function list.first ptr -> ptr :
  int.size ptr+
end

// Get pointer to the Nth element of the list
// Params: list (PTR), N (INT)
// Return: list[N] (PTR)
function list.nth ptr int -> ptr :
  dup list.len
  take len list N in

  // Exit with error if Nth element does not exist
  if
    N len >
    N 0 <
    ||
  do
    "[ERROR] Cannot get " eputs
    N   eputi ". value from the list with " eputs
    len eputi " items\n" eputs
    0 exit NULL ptr
    return
  endif

  // Return pointer to the Nth element from the list
  list N ptr.size * int.size + ptr+
end

// Remove an item from the certain index of the array
// Params: List, index
// Return: None
function list.pop ptr int :
  dup list.len
  take
    len
    list
    index
  in

  // Report error and exit if the index cannot be popped
  if
    index len >=
    index 0 <
    ||
  do
    "Cannot pop index " eputs
    index eputi
    " from array of length " eputs
    len eputi "\n" eputs
    1 exit
  endif

  while index len 1 - < do
    // list[index] = list[index+1]
    index 1 + list list.nth ptr.load
    index list list.nth ptr.store
    index 1 + index =
  done

  // Decrement the list.len
  len 1 - list int.store
end

// Test if list contains a string
// Params: List[str], str
// Return: bool
function list.contains_str ptr str -> bool :
  dup int.load
  0
  take
    index
    len
    list
    string
  in

  while index len < do
    index list list.nth str.load
    take list_string in

    // Return True if the current string matches with the parameter
    if string list_string streq do
      True return
    endif
    index 1 + index =
  done
  False
end

// Print list of integer-like values
// Params: list (PTR)
// Return: None
function list.print ptr :
  dup int.load
  take len list in
  0 while dup len < do
    list list.first
    over ptr.size *
    ptr+ int.load print " " puts
    1 +
  done drop
end

// Print a list of strings
// Params: list (PTR)
// Return: None
function list.puts ptr :
  dup int.load
  take len list in
  0 while dup len < do
    list list.first
    over ptr.size *
    ptr+ str.load puts
    1 +
  done drop
end
