// typing.torth - Definitions for non-built in types
include "std"

// Constants
const ITERABLE_CAPACITY 128 end

// === Array ===
// README:
//    Array is a contiguous memory containing list of 64-bit values.
//    => Value at the list pointer represents the amount of items in the list.
//    => The first index of the list comes after the length (ptr + 8 bytes).

// Initialize an array of certain size
// Include space for one extra integer (list length)
// Params: size (INT)
// Return: array (PTR)
class Array
    method init int -> Array :
        // Allocate memory for the array
        ptr.size * int.size + malloc

        // Set the size to 0
        0 over int.store
        cast(Array) // Return Array
    end

    // Free the allocated memory for a certain array
    // Params: array (PTR)
    // Return: None
    method delete Array :
        take array in
        array Array.len int.size * int.size +
        array cast(ptr) munmap
    end

    // Get the length of an array (number of elements)
    // Params: array (PTR)
    // Return: len (INT)
    method len Array -> int :
        // The length is stored at the array pointer
        cast(ptr) int.load
    end

    // Empty the array by setting the length value to 0
    // Params: array (PTR)
    // Return: None
    method empty Array :
        0 swap cast(ptr) int.store
    end

    // Copy the array to new memory location
    // Params: array (PTR)
    // Return: new_array (PTR)
    method copy Array -> Array :
        // Initialize variables
        dup Array.len ptr.size * int.size +
        dup Array.init
        take
            new_array
            memory_size
            old_array
        in

        // Copy the old memory to the new location
        memory_size old_array cast(ptr) new_array cast(ptr) memcpy
        new_array
    end

    // Get pointer to the first element of the array
    // Params: array (PTR)
    // Return: array[0] (PTR)
    method first Array -> ptr :
        cast(ptr) int.size ptr+
    end

    // Get pointer to the Nth element of the array
    // Params: array (PTR), N (INT)
    // Return: array[N] (PTR)
    method nth Array int -> ptr :
        dup Array.len
        take len array N in

        // Exit with error if Nth element does not exist
        if
            N len >=
            N 0 <
            ||
        do
            "[ERROR] Cannot get " eputs
            N   eputi ". value from the array with " eputs
            len eputi " items\n" eputs
            0 exit NULL cast(ptr)
            return
        endif

        // Return pointer to the Nth element from the array
        array cast(ptr) N ptr.size * int.size + ptr+
    end

    // Append value pointer to an array
    // Params: array (PTR), value (ANY)
    // Return: list (PTR)
    method append Array any :
        dup Array.len
        take
            len
            array
            value
        in

        // Add the value to the end of the Array
        array cast(ptr) int.size ptr+
        ptr.size len * ptr+
        value swap
        ptr.store

        // Increment the Array's length by one
        len 1 + array cast(ptr) int.store
    end

    // Remove an item from the certain index of the Array
    // Params: array, index
    // Return: None
    method pop Array int :
        dup Array.len
        take
            len
            array
            index
        in

        // Report error and exit if the index cannot be popped
        if
            index len >=
            index 0 <
            ||
        do
            "Cannot pop index " eputs
            index eputi
            " from array of length " eputs
            len eputi "\n" eputs
            1 exit
        endif

        while index len 1 - < do
            // array[index] = array[index+1]
            index 1 + array Array.nth ptr.load
            index array Array.nth ptr.store
            index 1 + index =
        done

        // Decrement the Array.len
        len 1 - array cast(ptr) int.store
    end

    // Store value to the Nth index of an array
    // Params: Array, any, int
    // Return: bool
    method store array:Array value:any index:int -> bool :
        // Check valid index
        if
            index array Array.len >=
            index 0 <
            ||
        do
            False return
        endif

        // Store value to the the Nth index of the array
        array cast(ptr) index ptr.size * ptr+
        value swap ptr.store
        True
    end

    // Test if array contains an integer
    // Params: Array[int], int
    // Return: bool
    method contains_int Array int -> bool :
        dup Array.len
        0
        take
            index
            len
            array
            integer
        in

        while index len < do
            index array Array.nth int.load
            take array_int in

            // Return True if the current integer matches with the parameter
            if integer array_int == do
                True return
            endif
            index 1 + index =
        done
        False
    end

    // Test if array contains a string
    // Params: Array[str], str
    // Return: bool
    method contains_str Array str -> bool :
        dup Array.len
        0
        take
            index
            len
            array
            string
        in

        while index len < do
            index array Array.nth str.load
            take array_string in

            // Return True if the current string matches with the parameter
            if string array_string streq do
                True return
            endif
            index 1 + index =
        done
        False
    end

    // Test if two Arrays have equal integer-like items in them
    // Params: Array[int], Array[int]
    // Return: bool
    method equals Array Array -> bool :
        dup  Array.len
        over Array.len
        0
        take
            index
            array2.len
            array1.len
            array1
            array2
        in

        // Arrays of different length cannot be equal
        if array1.len array2.len != do
            False return
        endif

        // Iterate over every item in arrays and check if they are equal
        while index array1.len < do
            if
                index array1 Array.nth int.load
                index array2 Array.nth int.load
                !=
            do
                False return
            endif
            index 1 + index =
        done
        True
    end

    // Test if two Arrays have equal strings in them
    // Params: Array[str], Array[str]
    // Return: bool
    method streq Array Array -> bool :
        dup  Array.len
        over Array.len
        0
        take
            index
            array2.len
            array1.len
            array1
            array2
        in

        // Arrays of different length cannot be equal
        if array1.len array2.len != do
            False return
        endif

        // Iterate over every item in arrays and check if the strings are equal
        while index array1.len < do
            if
                index array1 Array.nth str.load
                index array2 Array.nth str.load
                streq not
            do
                False return
            endif
            index 1 + index =
        done
        True
    end

    // Print array of integer-like values
    // Params: array (PTR)
    // Return: None
    method print Array :
        dup cast(ptr) int.load
        take len array in
        0 while dup len < do
            array Array.first
            over ptr.size *
            ptr+ int.load puti " " puts
            1 +
        done drop
    end

    // Print array of strings
    // Params: array (PTR)
    // Return: None
    method puts Array :
        dup cast(ptr) int.load
        take len array in
        0 while dup len < do
            array Array.first
            over ptr.size *
            ptr+ str.load puts
            1 +
        done drop
    end
endclass // Array


// === List ===
// README:
//    Lists are like arrays, but with dynamic resizing.
//    They use Arrays as the backend of the implementation.
//
//    List will reallocate a new array double the size
//    of the original when an overflow would happen.
//
//    The List object only contains a pointer to array
//    and the capacity of the allocated array.
//
//    Initial capacity for a new List equals ITERABLE_CAPACITY.

// List(array: ptr, capacity: int)
class List
  array:Array
  capacity:int

  // Initialize list with a size of ITERABLE_CAPACITY
  // Params: None
  // Return: list (PTR)
  method init -> List :
    // Allocate memory for the initial array
        ITERABLE_CAPACITY Array.init
        take array in

        // Allocate memory for List object
        List.size malloc cast(List)
        take list in

        // List(array=array, capacity=ITERABLE_CAPACITY)
        array                         list List->array
        ITERABLE_CAPACITY list List->capacity
        list
    end

    // Free the allocated memory for a certain list
    method delete List :
        dup List.array
        take array list in

        // Deallocate the array pointed by List.array
        array Array.delete

        // Deallocate the List object
        List.size list cast(ptr) munmap
    end

    // Append value pointer to a list
    // Params: list (PTR), value (ANY)
    // Return: list (PTR)
    method append List any :
        take list value_ptr in

        list List.capacity  // Capacity of the list
        list List.array     // Pointer to array
        dup Array.len       // Length of the array

        // Store values from the stack to variables
        take
            len
            array
            capacity
        in

        // Allocate bigger array if the current capacity is full
        if capacity len == do
            // Allocate an array double of the size of the original
            len 2 * capacity =
            capacity Array.init
            take new_array in

            // Update list capacity
            capacity list List->capacity

            // Copy the old array to new_array
            // dest (PTR), src (PTR), len (INT)
            array Array.len int.size * int.size +
            array cast(ptr) new_array cast(ptr) memcpy

            // Update new array length
            len new_array cast(ptr) int.store

            // Deallocate the old array
            array Array.delete

            // Set the new_array to array
            new_array array =

            array list List->array
        endif

        // Add the value_ptr to the end of the list
        value_ptr array Array.append
    end

    // Get the length of a list
    // Params: list (PTR)
    // Return: len (INT)
    method len List -> int :
        List.array Array.len
    end

    // Empty the list by setting the length value of pointed array to 0
    // Params: list (PTR)
    // Return: None
    method empty List :
        List.array Array.empty
    end

    // Copy the list to new memory location
    method copy List -> List :
        // Initialize variables
        dup List.len ptr.size * int.size +
        List.init
        take
            new_list
            memory_size
            old_list
        in

        // Copy the old memory to the new location
        memory_size old_list cast(ptr) new_list cast(ptr) memcpy
        new_list
    end

    // Get pointer to the first element of the list
    // Params: list (PTR)
    // Return: list[0] (PTR)
    method first List -> ptr :
        0 swap List.nth
    end

    // Get pointer to the last element of the list
    // Params: list (PTR)
    // Return: list[0] (PTR)
    method last List -> ptr :
        dup List.len 1 - swap List.nth
    end

    // Get pointer to the Nth element of the list
    // Params: list (PTR), N (INT)
    // Return: list[N] (PTR)
    method nth List int -> ptr :
        List.array Array.nth
    end

    // Remove an item from the certain index of the list
    // Params: List, index
    // Return: None
    method pop List int :
        List.array Array.pop
    end

    // Store value to the Nth index of a list
    // Params: List, value, index
    // Return: None
    method store List any int -> bool :
        List.array Array.store
    end

    // Test if two Arrays have equal integer-like items in them
    // Params: List[int], List[int]
    // Return: bool
    method equals List List -> bool :
        List.array
        swap List.array
        Array.equals
    end

    // Test if two Arrays have equal strings in them
    // Params: List[str], List[str]
    // Return: bool
    method streq List List -> bool :
        List.array
        swap List.array
        Array.streq
    end

    // Test if list contains an integer
    // Params: List[int], int
    // Return: bool
    method contains_int List int -> bool :
        List.array Array.contains_int
    end

    // Test if list contains a string
    // Params: List[str], str
    // Return: bool
    method contains_str List str -> bool :
        List.array Array.contains_str
    end
endclass // List

// === LinkedList ===
// README:
//    LinkedList is a doubly linked list of Nodes linked by pointers.
//    TODO: Rename LinkedList to indicate it is a doubly linked lists
//    LinkedList.init returns a pointer to the head Node.
function LinkedList.init -> Node :
    ptr.size malloc
    NULLPTR over ptr.store
    cast(Node)
end

// Push Node to LinkedList
// Params
//    head_ptr: Node
//    new_data: ptr
// Return None
function LinkedList.push Node ptr :
    dup cast(ptr) Node.load

    // Allocate new Node
    Node.size malloc cast(Node)
    take
        new_node
        head_node
        head_ptr
        new_data
    in

    // Store data to new Node
    new_data new_node Node->data

    // Make the old head new Node's next and previous as NULL
    head_node new_node Node->next
    NULL cast(Node) new_node Node->prev

    // Set the old head's prev to point to new Node
    if head_node cast(int) NULL != do
        new_node head_node Node->prev
    endif

    // Insert the new Node to head_ptr
    new_node head_ptr cast(ptr) Node.store
end

// Pop Node from LinkedList
// Return -1 if head is NULL
// Params
//    head_ptr: Node
// Return
//    popped_data: ptr
function LinkedList.pop Node -> ptr :
    dup cast(ptr) Node.load
    take head head_ptr in

    // Underflow condition
    if head cast(int) NULL == do
        -1 cast(ptr) return
    endif

    // Get the old head data
    head Node.data
    take popped_data in

    // Unlink the old head
    head Node.next head_ptr cast(ptr) Node.store

    // Deallocate the old head
    Node.size head cast(ptr) munmap

    // Return the popped data
    popped_data
end

// Get the length of a LinkedList
// Params
//    head_ptr: Node
// Return
//    length: int
function LinkedList.len Node -> int :
    cast(ptr) Node.load 0
    take count current in

    while current cast(int) NULL != do
        count 1 + count =
        current Node.next
        current =
    done
    count
end

// Check if LinkedList is empty
// Params
//    head_ptr: Node
// Return bool
function LinkedList.is_empty Node -> bool :
    cast(ptr) int.load 0 ==
end

function LinkedList.delete linked_list:Node :
  linked_list cast(ptr) Node.load
  take node in

  while node cast(int) NULL != do
    node Node.next
    node Node.delete
    take node in
  done
end

class Node
    data:ptr
    next:Node
    prev:Node

    method load ptr -> Node :
        ptr.load cast(Node)
    end

    method store ptr Node :
        swap cast(ptr) swap ptr.store
    end

    method delete node:Node :
        Node.size node cast(ptr) munmap
    end
endclass // Node
