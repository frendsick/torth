include "std"
include "parser"
include "typing"

class JsonValue
    value:any
    type:str

    method init value:any type:str -> JsonValue :
        JsonValue.size malloc cast(JsonValue)
        take json_value in

        // Validate arguments
        if type JsonValue.is_valid_type not do
            NULL cast(JsonValue) return
        endif

        value       json_value JsonValue->value
        type        json_value JsonValue->type
        json_value
    end

    method repr self:JsonValue -> str :
        self JsonValue.type take type in

        if type "null" streq do
            "null" return
        elif type "boolean" streq do
            if self JsonValue.value cast(bool) do
                "true" return
            else
                "false" return
            endif
        elif type "float" streq do
            self JsonValue.value cast(str) return
        elif type "number" streq do
            self JsonValue.value itoa return
        elif type "string" streq do
            '"' char.to_string
            self JsonValue.value cast(str) str.cat
            '"' swap str.append return
        elif type "array" streq do
            self JsonValue.value cast(List[JsonValue])
            "[" str.copy
            0
            take
                index
                repr
                array_items
            in

            while index array_items cast(List) List.len < do
                index array_items cast(List) List.nth
                ptr.load cast(JsonValue) JsonValue.repr
                repr swap str.cat repr =
                index 1 + index =

                if index array_items cast(List) List.len < do
                    ',' repr str.append repr =
                endif
            done

            ']' repr str.append return
        elif type "object" streq do
            self JsonValue.value cast(HashMap)
            dup HashMap.keys
            "{" str.copy
            0
            take
                index
                repr
                keys
                object
            in

            while index keys List.len < do
                // Key
                repr '"' char.to_string str.cat
                index keys List.nth str.load
                peek key in str.cat
                '"' swap str.append

                // Colon separates key and value
                ':' swap str.append repr =


                // Value
                key object HashMap.get cast(JsonValue) JsonValue.repr
                repr swap str.cat repr =
                index 1 + index =

                if index keys List.len < do
                    ',' repr str.append repr =
                endif
            done

            '}' repr str.append return
        endif

        f"Unknown JsonValue.type '{type}'" eputs
        1 exit
        "unreachable"
    end

    method is_valid_type type:str -> bool :
        type "null"     streq
        type "boolean"  streq ||
        type "float"    streq ||
        type "number"   streq ||
        type "string"   streq ||
        type "array"    streq ||
        type "object"   streq ||
    end
endclass

function parse_json_boolean parser:Parser -> str bool :
    if "true" parser Parser.parse_string swap drop do
        "true" True return
    endif
    if "false" parser Parser.parse_string swap drop do
        "false" True return
    endif

    // Was not boolean
    "" False
end

function parse_json_number parser:Parser -> str bool :
    parser Parser.parse_numbers dup str.len 0 >
end

function parse_json_float parser:Parser -> str bool :
    // Save original input
    parser Parser.input str.copy take original_input in

    if parser parse_json_number not do
        drop
        "" False return
    endif
    take number in

    if '.' parser Parser.parse_character not swap drop do
        original_input parser Parser->input
        "" False return
    endif

    if parser parse_json_number not do
        drop
        original_input parser Parser->input
        "" False return
    endif
    take decimal in

    f"{number}.{decimal}" True
end

function parse_double_quote parser:Parser -> str bool :
    '"' parser Parser.parse_character swap char.to_string swap
end

function parse_json_string parser:Parser -> str bool :
    // Save original input
    parser Parser.input str.copy take original_input in

    // Opening double quote
    if parser parse_double_quote not do
        drop
        "" False return
    endif
    take double_quote in

    // Rest of the string
    if parse_double_quote& parser Parser.parse_until not do
        drop
        original_input parser Parser->input
        "" False return
    endif
    parser parse_double_quote drop drop
    True
end

function parse_json_array parser:Parser -> List[JsonValue] bool :
    if '[' parser Parser.parse_character not swap drop do
        NULL cast(List[JsonValue]) False return
    endif

    parser Parser.input str.copy
    List.init cast(List[JsonValue])
    take json_array original_input in

    parser Parser.parse_whitespaces drop
    while ']' parser Parser.parse_character not swap drop do
        // Parse array item
        if parser json_parser not do
            drop
            original_input parser Parser->input
            NULL cast(List[JsonValue]) False return
        endif
        take array_item in

        // Append the array item to list
        array_item json_array cast(List) List.append

        // Comma separates array items
        parser Parser.parse_whitespaces drop
        ',' parser Parser.parse_character drop drop
        parser Parser.parse_whitespaces drop
    done

    json_array True
end

function parse_json_object parser:Parser -> HashMap bool :
    if '{' parser Parser.parse_character not swap drop do
        NULL cast(HashMap) False return
    endif

    parser Parser.input
    HashMap.init
    take object original_input in

    parser Parser.parse_whitespaces drop
    while '}' parser Parser.parse_character not swap drop do
        // Parse key
        if parse_double_quote& parser Parser.parse_predicate not swap drop do
            original_input parser Parser->input
            NULL cast(HashMap) False return
        endif

        if parse_double_quote& parser Parser.parse_until not do
            drop
            original_input parser Parser->input
            NULL cast(HashMap) False return
        endif
        take key in
        parser parse_double_quote drop drop

        // Colon separates key and value
        parser Parser.parse_whitespaces drop
        if ':' parser Parser.parse_character not swap drop do
            original_input parser Parser->input
            NULL cast(HashMap) False return
        endif
        parser Parser.parse_whitespaces drop

        // Parse value
        if parser json_parser not do
            drop
            original_input parser Parser->input
            NULL cast(HashMap) False return
        endif
        take value in

        // Add the key to the hash map
        value key object HashMap.set

        // Comma separates keys of objects
        parser Parser.parse_whitespaces drop
        ',' parser Parser.parse_character drop drop
        parser Parser.parse_whitespaces drop
    done

    object True
end

function string_to_bool string:str -> bool :
    if string "true" streq do
        True return
    elif string "false" streq do
        False return
    endif

    f"Invalid JSON boolean: {string}" eputs
    1 exit
    False // unreachable
end

function json_parser parser:Parser -> JsonValue bool :
    // null
    if "null" parser Parser.parse_string do
        "null" JsonValue.init True return
    endif drop

    if parser parse_json_boolean do
        "boolean" swap JsonValue.init True return
    endif drop

    // float
    if parser parse_json_float do
        "float" swap JsonValue.init True return
    endif drop

    // number (integer)
    if parser parse_json_number do
        "number" swap atoi JsonValue.init True return
    endif drop

    // string
    if parser parse_json_string do
        "string" swap JsonValue.init True return
    endif drop

    // array
    if parser parse_json_array do
        "array" swap JsonValue.init True return
    endif drop

    // object
    if parser parse_json_object do
        "object" swap JsonValue.init True return
    endif drop

    NULL cast(JsonValue) False
end

// Returns NULL if the input is not valid JSON
function parse_json input:str -> JsonValue bool :
    input Parser.init json_parser
end
